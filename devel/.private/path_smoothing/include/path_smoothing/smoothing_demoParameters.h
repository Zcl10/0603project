// *********************************************************
//
// File autogenerated for the path_smoothing package
// by the rosparam_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <ros/param.h>
#include <ros/node_handle.h>
#include <rosparam_handler/utilities.hpp>
#ifdef DYNAMIC_RECONFIGURE_FOUND
#include <path_smoothing/smoothing_demoConfig.h>
#else
struct smoothing_demoConfig{};
#endif


namespace path_smoothing {

/// \brief Parameter struct generated by rosparam_handler
struct smoothing_demoParameters {

  using Config = smoothing_demoConfig;

  smoothing_demoParameters(const ros::NodeHandle& private_node_handle)
  : globalNamespace{"/"},
    privateNamespace{private_node_handle.getNamespace() + "/"},
    nodeName{rosparam_handler::getNodeName(private_node_handle)} {}

  /// \brief Get values from parameter server
  /// 
  /// Will fail if a value can not be found and no default value is given.
  void fromParamServer(){
    bool success = true;
    success &= rosparam_handler::getParam(privateNamespace + "cg_heading_term_coe", cg_heading_term_coe, double{1.0});
    success &= rosparam_handler::getParam(privateNamespace + "cg_curvature_term_coe", cg_curvature_term_coe, double{0.0});
    success &= rosparam_handler::getParam(privateNamespace + "cg_obstacle_term_coe", cg_obstacle_term_coe, double{2.0});
    success &= rosparam_handler::getParam(privateNamespace + "gp_obs_sigma", gp_obs_sigma, double{0.03});
    success &= rosparam_handler::getParam(privateNamespace + "gp_vehicle_dynamic_sigma", gp_vehicle_dynamic_sigma, double{0.02});
    success &= rosparam_handler::getParam(privateNamespace + "gp_dt", gp_dt, double{0.4});
    success &= rosparam_handler::getParam(privateNamespace + "distance_threshold", distance_threshold, double{2.5});
    success &= rosparam_handler::getParam(privateNamespace + "cg_solver_type", cg_solver_type, int{1});
    rosparam_handler::testConstParam(privateNamespace + "cg_solver_type_Ceres");
    rosparam_handler::testConstParam(privateNamespace + "cg_solver_type_Self");
    rosparam_handler::testConstParam(privateNamespace + "cg_solver_type_ddd");
    rosparam_handler::testConstParam(privateNamespace + "cg_solver_type_ggg");
    rosparam_handler::testMin<double>(privateNamespace + "cg_heading_term_coe", cg_heading_term_coe, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "cg_heading_term_coe", cg_heading_term_coe, 10.0);
    rosparam_handler::testMin<double>(privateNamespace + "cg_curvature_term_coe", cg_curvature_term_coe, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "cg_curvature_term_coe", cg_curvature_term_coe, 5.0);
    rosparam_handler::testMin<double>(privateNamespace + "cg_obstacle_term_coe", cg_obstacle_term_coe, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "cg_obstacle_term_coe", cg_obstacle_term_coe, 5.0);
    rosparam_handler::testMin<double>(privateNamespace + "gp_obs_sigma", gp_obs_sigma, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "gp_obs_sigma", gp_obs_sigma, 1.0);
    rosparam_handler::testMin<double>(privateNamespace + "gp_vehicle_dynamic_sigma", gp_vehicle_dynamic_sigma, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "gp_vehicle_dynamic_sigma", gp_vehicle_dynamic_sigma, 1.0);
    rosparam_handler::testMin<double>(privateNamespace + "gp_dt", gp_dt, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "gp_dt", gp_dt, 5.0);
    rosparam_handler::testMin<double>(privateNamespace + "distance_threshold", distance_threshold, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "distance_threshold", distance_threshold, 5);
    if(!success){
      missingParamsWarning();
      rosparam_handler::exit("RosparamHandler: GetParam could net retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
  }

  /// \brief Set parameters on ROS parameter server.
  void toParamServer(){
  rosparam_handler::setParam(privateNamespace + "cg_heading_term_coe",cg_heading_term_coe);
  rosparam_handler::setParam(privateNamespace + "cg_curvature_term_coe",cg_curvature_term_coe);
  rosparam_handler::setParam(privateNamespace + "cg_obstacle_term_coe",cg_obstacle_term_coe);
  rosparam_handler::setParam(privateNamespace + "gp_obs_sigma",gp_obs_sigma);
  rosparam_handler::setParam(privateNamespace + "gp_vehicle_dynamic_sigma",gp_vehicle_dynamic_sigma);
  rosparam_handler::setParam(privateNamespace + "gp_dt",gp_dt);
  rosparam_handler::setParam(privateNamespace + "distance_threshold",distance_threshold);
  rosparam_handler::setParam(privateNamespace + "cg_solver_type",cg_solver_type);        
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0){
#ifdef DYNAMIC_RECONFIGURE_FOUND
    cg_heading_term_coe = config.cg_heading_term_coe;
    cg_curvature_term_coe = config.cg_curvature_term_coe;
    cg_obstacle_term_coe = config.cg_obstacle_term_coe;
    gp_obs_sigma = config.gp_obs_sigma;
    gp_vehicle_dynamic_sigma = config.gp_vehicle_dynamic_sigma;
    gp_dt = config.gp_dt;
    distance_threshold = config.distance_threshold;
    cg_solver_type = config.cg_solver_type;
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
  rosparam_handler::exit("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  void toConfig(Config& config){
#ifdef DYNAMIC_RECONFIGURE_FOUND
       config.cg_heading_term_coe = cg_heading_term_coe;
   config.cg_curvature_term_coe = cg_curvature_term_coe;
   config.cg_obstacle_term_coe = cg_obstacle_term_coe;
   config.gp_obs_sigma = gp_obs_sigma;
   config.gp_vehicle_dynamic_sigma = gp_vehicle_dynamic_sigma;
   config.gp_dt = gp_dt;
   config.distance_threshold = distance_threshold;
   config.cg_solver_type = cg_solver_type;
#else
      ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So toConfig() is not available. Please recompile with dynamic_reconfigure.");
      rosparam_handler::exit("dynamic_reconfigure was not found during compilation. So toConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const smoothing_demoParameters& p)
  {
    os << "[" << p.nodeName << "]\nNode " << p.nodeName << " has the following parameters:\n"
      << "	" << p.privateNamespace << "cg_heading_term_coe:" << p.cg_heading_term_coe << "\n"
      << "	" << p.privateNamespace << "cg_curvature_term_coe:" << p.cg_curvature_term_coe << "\n"
      << "	" << p.privateNamespace << "cg_obstacle_term_coe:" << p.cg_obstacle_term_coe << "\n"
      << "	" << p.privateNamespace << "gp_obs_sigma:" << p.gp_obs_sigma << "\n"
      << "	" << p.privateNamespace << "gp_vehicle_dynamic_sigma:" << p.gp_vehicle_dynamic_sigma << "\n"
      << "	" << p.privateNamespace << "gp_dt:" << p.gp_dt << "\n"
      << "	" << p.privateNamespace << "distance_threshold:" << p.distance_threshold << "\n"
      << "	" << p.privateNamespace << "cg_solver_type:" << p.cg_solver_type << "\n"
      << "	" << p.privateNamespace << "cg_solver_type_Ceres:" << p.cg_solver_type_Ceres << "\n"
      << "	" << p.privateNamespace << "cg_solver_type_Self:" << p.cg_solver_type_Self << "\n"
      << "	" << p.privateNamespace << "cg_solver_type_ddd:" << p.cg_solver_type_ddd << "\n"
      << "	" << p.privateNamespace << "cg_solver_type_ggg:" << p.cg_solver_type_ggg << "\n"
;
    return os;
  }

    double cg_heading_term_coe; /*!< cg method coe */
  double cg_curvature_term_coe; /*!< cg method coe */
  double cg_obstacle_term_coe; /*!< cg method coe */
  double gp_obs_sigma; /*!< gp method coe */
  double gp_vehicle_dynamic_sigma; /*!< gp method coe */
  double gp_dt; /*!< gp method coe */
  double distance_threshold; /*!< gp method coe */
  int cg_solver_type; /*!< solver enum */
  static constexpr auto cg_solver_type_Ceres = 0; /*!< Constant for enum cg_solver_type */
  static constexpr auto cg_solver_type_Self = 1; /*!< Constant for enum cg_solver_type */
  static constexpr auto cg_solver_type_ddd = 2; /*!< Constant for enum cg_solver_type */
  static constexpr auto cg_solver_type_ggg = 3; /*!< Constant for enum cg_solver_type */

private:
  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << nodeName << "]\nThe following parameters do not have default values and need to be specified:\n"
    );
  }

  const std::string globalNamespace;
  const std::string privateNamespace;
  const std::string nodeName;
};

} // namespace path_smoothing
