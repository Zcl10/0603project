// Generated by gencpp from file plan2control_msgs/Trajectoryset.msg
// DO NOT EDIT!


#ifndef PLAN2CONTROL_MSGS_MESSAGE_TRAJECTORYSET_H
#define PLAN2CONTROL_MSGS_MESSAGE_TRAJECTORYSET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <plan2control_msgs/Trajectory.h>

namespace plan2control_msgs
{
template <class ContainerAllocator>
struct Trajectoryset_
{
  typedef Trajectoryset_<ContainerAllocator> Type;

  Trajectoryset_()
    : header()
    , trajectories()
    , replansucceed(0)  {
    }
  Trajectoryset_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , trajectories(_alloc)
    , replansucceed(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::plan2control_msgs::Trajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::plan2control_msgs::Trajectory_<ContainerAllocator> >::other >  _trajectories_type;
  _trajectories_type trajectories;

   typedef uint8_t _replansucceed_type;
  _replansucceed_type replansucceed;





  typedef boost::shared_ptr< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectoryset_

typedef ::plan2control_msgs::Trajectoryset_<std::allocator<void> > Trajectoryset;

typedef boost::shared_ptr< ::plan2control_msgs::Trajectoryset > TrajectorysetPtr;
typedef boost::shared_ptr< ::plan2control_msgs::Trajectoryset const> TrajectorysetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan2control_msgs::Trajectoryset_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace plan2control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'plan2control_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/plan2control_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7baba054cf904a3e6277282e7d205c87";
  }

  static const char* value(const ::plan2control_msgs::Trajectoryset_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7baba054cf904a3eULL;
  static const uint64_t static_value2 = 0x6277282e7d205c87ULL;
};

template<class ContainerAllocator>
struct DataType< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan2control_msgs/Trajectoryset";
  }

  static const char* value(const ::plan2control_msgs::Trajectoryset_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
Trajectory[] trajectories\n\
uint8 replansucceed\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: plan2control_msgs/Trajectory\n\
std_msgs/Header header\n\
Traj_Node[] points\n\
float64 issued_acc\n\
int32 delay_index\n\
\n\
================================================================================\n\
MSG: plan2control_msgs/Traj_Node\n\
bool forward\n\
int32 id\n\
geometry_msgs/Point position\n\
geometry_msgs/Quaternion orientation\n\
float64 curvature\n\
geometry_msgs/Twist velocity\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::plan2control_msgs::Trajectoryset_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.trajectories);
      stream.next(m.replansucceed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectoryset_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan2control_msgs::Trajectoryset_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan2control_msgs::Trajectoryset_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "trajectories[]" << std::endl;
    for (size_t i = 0; i < v.trajectories.size(); ++i)
    {
      s << indent << "  trajectories[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::plan2control_msgs::Trajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories[i]);
    }
    s << indent << "replansucceed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.replansucceed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN2CONTROL_MSGS_MESSAGE_TRAJECTORYSET_H
