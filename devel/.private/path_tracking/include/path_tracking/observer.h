// Generated by gencpp from file path_tracking/observer.msg
// DO NOT EDIT!


#ifndef PATH_TRACKING_MESSAGE_OBSERVER_H
#define PATH_TRACKING_MESSAGE_OBSERVER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <anm_msgs/VehicleState.h>
#include <control_msgs/Report.h>

namespace path_tracking
{
template <class ContainerAllocator>
struct observer_
{
  typedef observer_<ContainerAllocator> Type;

  observer_()
    : header()
    , vehicle_state()
    , ecu_report()
    , speed_cmd(0.0)
    , steer_cmd(0.0)
    , lateral_error(0.0)
    , heading_error(0.0)
    , time_cost(0.0)  {
    }
  observer_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicle_state(_alloc)
    , ecu_report(_alloc)
    , speed_cmd(0.0)
    , steer_cmd(0.0)
    , lateral_error(0.0)
    , heading_error(0.0)
    , time_cost(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::anm_msgs::VehicleState_<ContainerAllocator>  _vehicle_state_type;
  _vehicle_state_type vehicle_state;

   typedef  ::control_msgs::Report_<ContainerAllocator>  _ecu_report_type;
  _ecu_report_type ecu_report;

   typedef double _speed_cmd_type;
  _speed_cmd_type speed_cmd;

   typedef double _steer_cmd_type;
  _steer_cmd_type steer_cmd;

   typedef double _lateral_error_type;
  _lateral_error_type lateral_error;

   typedef double _heading_error_type;
  _heading_error_type heading_error;

   typedef double _time_cost_type;
  _time_cost_type time_cost;





  typedef boost::shared_ptr< ::path_tracking::observer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_tracking::observer_<ContainerAllocator> const> ConstPtr;

}; // struct observer_

typedef ::path_tracking::observer_<std::allocator<void> > observer;

typedef boost::shared_ptr< ::path_tracking::observer > observerPtr;
typedef boost::shared_ptr< ::path_tracking::observer const> observerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_tracking::observer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_tracking::observer_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_tracking

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'path_tracking': ['/home/bit2/0603_project/tang_ws/src/control/path_tracking/msg'], 'control_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/control_msgs/msg'], 'sensor_driver_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/sensor_driver_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'anm_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/anm_msgs/msg'], 'dbw_mkz_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/dbw_mkz_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_tracking::observer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_tracking::observer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_tracking::observer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_tracking::observer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_tracking::observer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_tracking::observer_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_tracking::observer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f683c55d076db2e680be51e6dee7354";
  }

  static const char* value(const ::path_tracking::observer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f683c55d076db2eULL;
  static const uint64_t static_value2 = 0x680be51e6dee7354ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_tracking::observer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_tracking/observer";
  }

  static const char* value(const ::path_tracking::observer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_tracking::observer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
anm_msgs/VehicleState vehicle_state\n\
control_msgs/Report ecu_report\n\
float64 speed_cmd\n\
float64 steer_cmd\n\
float64 lateral_error\n\
float64 heading_error\n\
float64 time_cost\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: anm_msgs/VehicleState\n\
# This message describes the complete vehicle state\n\
# orientation = orientation of the vehicle using euler angles\n\
\n\
Header header\n\
string child_frame_id\n\
\n\
geometry_msgs/Point position\n\
geometry_msgs/Vector3 orientation\n\
geometry_msgs/Twist velocity\n\
geometry_msgs/Twist acceleration\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: control_msgs/Report\n\
Header header\n\
ReportControl control\n\
\n\
ReportControl vcu_torque_brake\n\
\n\
ReportMotion motion\n\
ReportBrake brake\n\
ReportThrottle throttle\n\
ReportWheel wheel\n\
ReportHMI manual\n\
ReportVehicleWorkMode vehicle_work_mode \n\
\n\
================================================================================\n\
MSG: control_msgs/ReportControl\n\
ControlSpeed Speed\n\
ControlSteer Steer\n\
ControlMode ordermode\n\
\n\
\n\
================================================================================\n\
MSG: control_msgs/ControlSpeed\n\
Header header\n\
uint8 priority\n\
uint8 gear\n\
float64 speed\n\
float64 acc\n\
float64 torque\n\
float64 brake\n\
\n\
================================================================================\n\
MSG: control_msgs/ControlSteer\n\
Header header\n\
uint8 priority\n\
float64 steer\n\
\n\
\n\
================================================================================\n\
MSG: control_msgs/ControlMode\n\
Header header\n\
uint8 RainyLight\n\
\n\
\n\
\n\
================================================================================\n\
MSG: control_msgs/ReportMotion\n\
uint8 drive_mode\n\
float64 steer\n\
uint8 gear\n\
float64 velocity\n\
\n\
\n\
\n\
================================================================================\n\
MSG: control_msgs/ReportBrake\n\
float64 left_pressure_back\n\
float64 right_pressure_back\n\
uint8 auto_park_state\n\
uint8 auto_brake_enable\n\
uint8 system_hot_warn\n\
uint8 system_error_code\n\
float64 left_pressure_set\n\
float64 right_pressure_set\n\
float32 brake_pedal\n\
\n\
================================================================================\n\
MSG: control_msgs/ReportThrottle\n\
float32 throttle_opening\n\
float32 throttle_pedal\n\
\n\
================================================================================\n\
MSG: control_msgs/ReportWheel\n\
float32 front_left\n\
float32 front_right\n\
float32 rear_left\n\
float32 rear_right\n\
uint8 statusfl\n\
uint8 statusfr\n\
uint8 statusrl\n\
uint8 statusrr\n\
\n\
================================================================================\n\
MSG: control_msgs/ReportHMI\n\
uint8 manual_estop\n\
uint8 is_human_brake \n\
\n\
================================================================================\n\
MSG: control_msgs/ReportVehicleWorkMode\n\
uint8 work_mode\n\
\n\
\n\
";
  }

  static const char* value(const ::path_tracking::observer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_tracking::observer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicle_state);
      stream.next(m.ecu_report);
      stream.next(m.speed_cmd);
      stream.next(m.steer_cmd);
      stream.next(m.lateral_error);
      stream.next(m.heading_error);
      stream.next(m.time_cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct observer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_tracking::observer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_tracking::observer_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicle_state: ";
    s << std::endl;
    Printer< ::anm_msgs::VehicleState_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_state);
    s << indent << "ecu_report: ";
    s << std::endl;
    Printer< ::control_msgs::Report_<ContainerAllocator> >::stream(s, indent + "  ", v.ecu_report);
    s << indent << "speed_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.speed_cmd);
    s << indent << "steer_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.steer_cmd);
    s << indent << "lateral_error: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_error);
    s << indent << "heading_error: ";
    Printer<double>::stream(s, indent + "  ", v.heading_error);
    s << indent << "time_cost: ";
    Printer<double>::stream(s, indent + "  ", v.time_cost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_TRACKING_MESSAGE_OBSERVER_H
