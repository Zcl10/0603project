// Generated by gencpp from file movobsplan_msgs/Movobspeed.msg
// DO NOT EDIT!


#ifndef MOVOBSPLAN_MSGS_MESSAGE_MOVOBSPEED_H
#define MOVOBSPLAN_MSGS_MESSAGE_MOVOBSPEED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movobsplan_msgs
{
template <class ContainerAllocator>
struct Movobspeed_
{
  typedef Movobspeed_<ContainerAllocator> Type;

  Movobspeed_()
    : collision(0)
    , exp_vel(0.0)
    , exp_time(0.0)
    , vel_to_dymicol(0.0)  {
    }
  Movobspeed_(const ContainerAllocator& _alloc)
    : collision(0)
    , exp_vel(0.0)
    , exp_time(0.0)
    , vel_to_dymicol(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _collision_type;
  _collision_type collision;

   typedef double _exp_vel_type;
  _exp_vel_type exp_vel;

   typedef double _exp_time_type;
  _exp_time_type exp_time;

   typedef double _vel_to_dymicol_type;
  _vel_to_dymicol_type vel_to_dymicol;





  typedef boost::shared_ptr< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> const> ConstPtr;

}; // struct Movobspeed_

typedef ::movobsplan_msgs::Movobspeed_<std::allocator<void> > Movobspeed;

typedef boost::shared_ptr< ::movobsplan_msgs::Movobspeed > MovobspeedPtr;
typedef boost::shared_ptr< ::movobsplan_msgs::Movobspeed const> MovobspeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movobsplan_msgs::Movobspeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace movobsplan_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'movobsplan_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/movobsplan_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e108d72b562baf3de0c61211ba4f831";
  }

  static const char* value(const ::movobsplan_msgs::Movobspeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e108d72b562baf3ULL;
  static const uint64_t static_value2 = 0xde0c61211ba4f831ULL;
};

template<class ContainerAllocator>
struct DataType< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movobsplan_msgs/Movobspeed";
  }

  static const char* value(const ::movobsplan_msgs::Movobspeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 collision\n\
float64 exp_vel\n\
float64 exp_time\n\
float64 vel_to_dymicol\n\
";
  }

  static const char* value(const ::movobsplan_msgs::Movobspeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.collision);
      stream.next(m.exp_vel);
      stream.next(m.exp_time);
      stream.next(m.vel_to_dymicol);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Movobspeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movobsplan_msgs::Movobspeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movobsplan_msgs::Movobspeed_<ContainerAllocator>& v)
  {
    s << indent << "collision: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.collision);
    s << indent << "exp_vel: ";
    Printer<double>::stream(s, indent + "  ", v.exp_vel);
    s << indent << "exp_time: ";
    Printer<double>::stream(s, indent + "  ", v.exp_time);
    s << indent << "vel_to_dymicol: ";
    Printer<double>::stream(s, indent + "  ", v.vel_to_dymicol);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVOBSPLAN_MSGS_MESSAGE_MOVOBSPEED_H
