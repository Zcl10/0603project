// Generated by gencpp from file movobsplan_msgs/Movobspath.msg
// DO NOT EDIT!


#ifndef MOVOBSPLAN_MSGS_MESSAGE_MOVOBSPATH_H
#define MOVOBSPLAN_MSGS_MESSAGE_MOVOBSPATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace movobsplan_msgs
{
template <class ContainerAllocator>
struct Movobspath_
{
  typedef Movobspath_<ContainerAllocator> Type;

  Movobspath_()
    : collision(0)
    , penaltydepth(0.0)
    , vel_to_dymicol(0.0)
    , position()  {
    }
  Movobspath_(const ContainerAllocator& _alloc)
    : collision(0)
    , penaltydepth(0.0)
    , vel_to_dymicol(0.0)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _collision_type;
  _collision_type collision;

   typedef double _penaltydepth_type;
  _penaltydepth_type penaltydepth;

   typedef double _vel_to_dymicol_type;
  _vel_to_dymicol_type vel_to_dymicol;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::movobsplan_msgs::Movobspath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movobsplan_msgs::Movobspath_<ContainerAllocator> const> ConstPtr;

}; // struct Movobspath_

typedef ::movobsplan_msgs::Movobspath_<std::allocator<void> > Movobspath;

typedef boost::shared_ptr< ::movobsplan_msgs::Movobspath > MovobspathPtr;
typedef boost::shared_ptr< ::movobsplan_msgs::Movobspath const> MovobspathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movobsplan_msgs::Movobspath_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movobsplan_msgs::Movobspath_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace movobsplan_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'movobsplan_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/movobsplan_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::movobsplan_msgs::Movobspath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movobsplan_msgs::Movobspath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movobsplan_msgs::Movobspath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movobsplan_msgs::Movobspath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movobsplan_msgs::Movobspath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movobsplan_msgs::Movobspath_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movobsplan_msgs::Movobspath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b91e4c47ca79497da4d13234e1f837d6";
  }

  static const char* value(const ::movobsplan_msgs::Movobspath_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb91e4c47ca79497dULL;
  static const uint64_t static_value2 = 0xa4d13234e1f837d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::movobsplan_msgs::Movobspath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movobsplan_msgs/Movobspath";
  }

  static const char* value(const ::movobsplan_msgs::Movobspath_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movobsplan_msgs::Movobspath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 collision\n\
float64 penaltydepth\n\
float64 vel_to_dymicol\n\
geometry_msgs/Point position\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::movobsplan_msgs::Movobspath_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movobsplan_msgs::Movobspath_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.collision);
      stream.next(m.penaltydepth);
      stream.next(m.vel_to_dymicol);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Movobspath_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movobsplan_msgs::Movobspath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movobsplan_msgs::Movobspath_<ContainerAllocator>& v)
  {
    s << indent << "collision: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.collision);
    s << indent << "penaltydepth: ";
    Printer<double>::stream(s, indent + "  ", v.penaltydepth);
    s << indent << "vel_to_dymicol: ";
    Printer<double>::stream(s, indent + "  ", v.vel_to_dymicol);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVOBSPLAN_MSGS_MESSAGE_MOVOBSPATH_H
