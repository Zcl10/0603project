// Generated by gencpp from file three_one_msgs/ReportCylinderPressure.msg
// DO NOT EDIT!


#ifndef THREE_ONE_MSGS_MESSAGE_REPORTCYLINDERPRESSURE_H
#define THREE_ONE_MSGS_MESSAGE_REPORTCYLINDERPRESSURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace three_one_msgs
{
template <class ContainerAllocator>
struct ReportCylinderPressure_
{
  typedef ReportCylinderPressure_<ContainerAllocator> Type;

  ReportCylinderPressure_()
    : left_one(0)
    , left_two(0)
    , left_three(0)
    , left_four(0)
    , right_one(0)
    , right_two(0)
    , right_three(0)
    , right_four(0)  {
    }
  ReportCylinderPressure_(const ContainerAllocator& _alloc)
    : left_one(0)
    , left_two(0)
    , left_three(0)
    , left_four(0)
    , right_one(0)
    , right_two(0)
    , right_three(0)
    , right_four(0)  {
  (void)_alloc;
    }



   typedef uint8_t _left_one_type;
  _left_one_type left_one;

   typedef uint8_t _left_two_type;
  _left_two_type left_two;

   typedef uint8_t _left_three_type;
  _left_three_type left_three;

   typedef uint8_t _left_four_type;
  _left_four_type left_four;

   typedef uint8_t _right_one_type;
  _right_one_type right_one;

   typedef uint8_t _right_two_type;
  _right_two_type right_two;

   typedef uint8_t _right_three_type;
  _right_three_type right_three;

   typedef uint8_t _right_four_type;
  _right_four_type right_four;





  typedef boost::shared_ptr< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> const> ConstPtr;

}; // struct ReportCylinderPressure_

typedef ::three_one_msgs::ReportCylinderPressure_<std::allocator<void> > ReportCylinderPressure;

typedef boost::shared_ptr< ::three_one_msgs::ReportCylinderPressure > ReportCylinderPressurePtr;
typedef boost::shared_ptr< ::three_one_msgs::ReportCylinderPressure const> ReportCylinderPressureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace three_one_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'three_one_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/three_one_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e261355aeec2b4d716939018ae20229e";
  }

  static const char* value(const ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe261355aeec2b4d7ULL;
  static const uint64_t static_value2 = 0x16939018ae20229eULL;
};

template<class ContainerAllocator>
struct DataType< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "three_one_msgs/ReportCylinderPressure";
  }

  static const char* value(const ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 left_one\n\
uint8 left_two\n\
uint8 left_three\n\
uint8 left_four\n\
uint8 right_one\n\
uint8 right_two\n\
uint8 right_three\n\
uint8 right_four\n\
";
  }

  static const char* value(const ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_one);
      stream.next(m.left_two);
      stream.next(m.left_three);
      stream.next(m.left_four);
      stream.next(m.right_one);
      stream.next(m.right_two);
      stream.next(m.right_three);
      stream.next(m.right_four);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReportCylinderPressure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::three_one_msgs::ReportCylinderPressure_<ContainerAllocator>& v)
  {
    s << indent << "left_one: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_one);
    s << indent << "left_two: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_two);
    s << indent << "left_three: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_three);
    s << indent << "left_four: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_four);
    s << indent << "right_one: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_one);
    s << indent << "right_two: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_two);
    s << indent << "right_three: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_three);
    s << indent << "right_four: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_four);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THREE_ONE_MSGS_MESSAGE_REPORTCYLINDERPRESSURE_H
