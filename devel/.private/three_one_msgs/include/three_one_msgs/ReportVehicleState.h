// Generated by gencpp from file three_one_msgs/ReportVehicleState.msg
// DO NOT EDIT!


#ifndef THREE_ONE_MSGS_MESSAGE_REPORTVEHICLESTATE_H
#define THREE_ONE_MSGS_MESSAGE_REPORTVEHICLESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace three_one_msgs
{
template <class ContainerAllocator>
struct ReportVehicleState_
{
  typedef ReportVehicleState_<ContainerAllocator> Type;

  ReportVehicleState_()
    : error_code(0)
    , two_chamber_valve(0)
    , vertical_wall_status(0)
    , entrenchment(0)
    , weapon_330(0)
    , weapon_28(0)
    , vehicle_height(0)
    , tailgate_state(0)
    , SOC(0)
    , vehicle_roll(0)
    , vehicle_pitch(0)  {
    }
  ReportVehicleState_(const ContainerAllocator& _alloc)
    : error_code(0)
    , two_chamber_valve(0)
    , vertical_wall_status(0)
    , entrenchment(0)
    , weapon_330(0)
    , weapon_28(0)
    , vehicle_height(0)
    , tailgate_state(0)
    , SOC(0)
    , vehicle_roll(0)
    , vehicle_pitch(0)  {
  (void)_alloc;
    }



   typedef uint8_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _two_chamber_valve_type;
  _two_chamber_valve_type two_chamber_valve;

   typedef uint8_t _vertical_wall_status_type;
  _vertical_wall_status_type vertical_wall_status;

   typedef uint8_t _entrenchment_type;
  _entrenchment_type entrenchment;

   typedef uint8_t _weapon_330_type;
  _weapon_330_type weapon_330;

   typedef uint8_t _weapon_28_type;
  _weapon_28_type weapon_28;

   typedef uint8_t _vehicle_height_type;
  _vehicle_height_type vehicle_height;

   typedef uint8_t _tailgate_state_type;
  _tailgate_state_type tailgate_state;

   typedef uint8_t _SOC_type;
  _SOC_type SOC;

   typedef int8_t _vehicle_roll_type;
  _vehicle_roll_type vehicle_roll;

   typedef int8_t _vehicle_pitch_type;
  _vehicle_pitch_type vehicle_pitch;





  typedef boost::shared_ptr< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> const> ConstPtr;

}; // struct ReportVehicleState_

typedef ::three_one_msgs::ReportVehicleState_<std::allocator<void> > ReportVehicleState;

typedef boost::shared_ptr< ::three_one_msgs::ReportVehicleState > ReportVehicleStatePtr;
typedef boost::shared_ptr< ::three_one_msgs::ReportVehicleState const> ReportVehicleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::three_one_msgs::ReportVehicleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace three_one_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'three_one_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/three_one_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "038961e65ff3db9742a20c76bdc20ca1";
  }

  static const char* value(const ::three_one_msgs::ReportVehicleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x038961e65ff3db97ULL;
  static const uint64_t static_value2 = 0x42a20c76bdc20ca1ULL;
};

template<class ContainerAllocator>
struct DataType< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "three_one_msgs/ReportVehicleState";
  }

  static const char* value(const ::three_one_msgs::ReportVehicleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 error_code\n\
uint8 two_chamber_valve\n\
uint8 vertical_wall_status\n\
uint8 entrenchment\n\
uint8 weapon_330\n\
uint8 weapon_28\n\
uint8 vehicle_height\n\
uint8 tailgate_state\n\
uint8 SOC\n\
int8 vehicle_roll\n\
int8 vehicle_pitch\n\
";
  }

  static const char* value(const ::three_one_msgs::ReportVehicleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
      stream.next(m.two_chamber_valve);
      stream.next(m.vertical_wall_status);
      stream.next(m.entrenchment);
      stream.next(m.weapon_330);
      stream.next(m.weapon_28);
      stream.next(m.vehicle_height);
      stream.next(m.tailgate_state);
      stream.next(m.SOC);
      stream.next(m.vehicle_roll);
      stream.next(m.vehicle_pitch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReportVehicleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::three_one_msgs::ReportVehicleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::three_one_msgs::ReportVehicleState_<ContainerAllocator>& v)
  {
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "two_chamber_valve: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.two_chamber_valve);
    s << indent << "vertical_wall_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vertical_wall_status);
    s << indent << "entrenchment: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.entrenchment);
    s << indent << "weapon_330: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.weapon_330);
    s << indent << "weapon_28: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.weapon_28);
    s << indent << "vehicle_height: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_height);
    s << indent << "tailgate_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tailgate_state);
    s << indent << "SOC: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SOC);
    s << indent << "vehicle_roll: ";
    Printer<int8_t>::stream(s, indent + "  ", v.vehicle_roll);
    s << indent << "vehicle_pitch: ";
    Printer<int8_t>::stream(s, indent + "  ", v.vehicle_pitch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THREE_ONE_MSGS_MESSAGE_REPORTVEHICLESTATE_H
