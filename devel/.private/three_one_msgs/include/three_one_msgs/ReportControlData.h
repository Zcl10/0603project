// Generated by gencpp from file three_one_msgs/ReportControlData.msg
// DO NOT EDIT!


#ifndef THREE_ONE_MSGS_MESSAGE_REPORTCONTROLDATA_H
#define THREE_ONE_MSGS_MESSAGE_REPORTCONTROLDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace three_one_msgs
{
template <class ContainerAllocator>
struct ReportControlData_
{
  typedef ReportControlData_<ContainerAllocator> Type;

  ReportControlData_()
    : curvature(0.0)
    , speed(0.0)
    , rpm(0)
    , work_mode(0)
    , gear(0)
    , turn_to(0)
    , brake(0)
    , park(0)
    , cylinder_select(0)
    , suspension_select(0)
    , vertical_wall_mode(0)
    , suspension_work_mode(0)
    , suspension_work_mode_detail(0)
    , suspension_cylinder_select_mode(0)
    , suspension_cylinder_motor_control(0)
    , fix_two_chamber_valve(0)  {
    }
  ReportControlData_(const ContainerAllocator& _alloc)
    : curvature(0.0)
    , speed(0.0)
    , rpm(0)
    , work_mode(0)
    , gear(0)
    , turn_to(0)
    , brake(0)
    , park(0)
    , cylinder_select(0)
    , suspension_select(0)
    , vertical_wall_mode(0)
    , suspension_work_mode(0)
    , suspension_work_mode_detail(0)
    , suspension_cylinder_select_mode(0)
    , suspension_cylinder_motor_control(0)
    , fix_two_chamber_valve(0)  {
  (void)_alloc;
    }



   typedef float _curvature_type;
  _curvature_type curvature;

   typedef float _speed_type;
  _speed_type speed;

   typedef uint16_t _rpm_type;
  _rpm_type rpm;

   typedef uint8_t _work_mode_type;
  _work_mode_type work_mode;

   typedef uint8_t _gear_type;
  _gear_type gear;

   typedef uint8_t _turn_to_type;
  _turn_to_type turn_to;

   typedef uint8_t _brake_type;
  _brake_type brake;

   typedef uint8_t _park_type;
  _park_type park;

   typedef uint8_t _cylinder_select_type;
  _cylinder_select_type cylinder_select;

   typedef uint8_t _suspension_select_type;
  _suspension_select_type suspension_select;

   typedef uint8_t _vertical_wall_mode_type;
  _vertical_wall_mode_type vertical_wall_mode;

   typedef uint8_t _suspension_work_mode_type;
  _suspension_work_mode_type suspension_work_mode;

   typedef uint8_t _suspension_work_mode_detail_type;
  _suspension_work_mode_detail_type suspension_work_mode_detail;

   typedef uint8_t _suspension_cylinder_select_mode_type;
  _suspension_cylinder_select_mode_type suspension_cylinder_select_mode;

   typedef uint8_t _suspension_cylinder_motor_control_type;
  _suspension_cylinder_motor_control_type suspension_cylinder_motor_control;

   typedef uint8_t _fix_two_chamber_valve_type;
  _fix_two_chamber_valve_type fix_two_chamber_valve;





  typedef boost::shared_ptr< ::three_one_msgs::ReportControlData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::three_one_msgs::ReportControlData_<ContainerAllocator> const> ConstPtr;

}; // struct ReportControlData_

typedef ::three_one_msgs::ReportControlData_<std::allocator<void> > ReportControlData;

typedef boost::shared_ptr< ::three_one_msgs::ReportControlData > ReportControlDataPtr;
typedef boost::shared_ptr< ::three_one_msgs::ReportControlData const> ReportControlDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::three_one_msgs::ReportControlData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::three_one_msgs::ReportControlData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace three_one_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'three_one_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/three_one_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::three_one_msgs::ReportControlData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::three_one_msgs::ReportControlData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::three_one_msgs::ReportControlData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::three_one_msgs::ReportControlData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::three_one_msgs::ReportControlData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::three_one_msgs::ReportControlData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::three_one_msgs::ReportControlData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6b97385db9e76f4dfa530144bb3765f";
  }

  static const char* value(const ::three_one_msgs::ReportControlData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6b97385db9e76f4ULL;
  static const uint64_t static_value2 = 0xdfa530144bb3765fULL;
};

template<class ContainerAllocator>
struct DataType< ::three_one_msgs::ReportControlData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "three_one_msgs/ReportControlData";
  }

  static const char* value(const ::three_one_msgs::ReportControlData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::three_one_msgs::ReportControlData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 curvature\n\
float32 speed\n\
uint16 rpm\n\
uint8 work_mode\n\
uint8 gear\n\
uint8 turn_to\n\
uint8 brake\n\
uint8 park\n\
uint8 cylinder_select\n\
uint8 suspension_select\n\
uint8 vertical_wall_mode\n\
uint8 suspension_work_mode\n\
uint8 suspension_work_mode_detail\n\
uint8 suspension_cylinder_select_mode\n\
uint8 suspension_cylinder_motor_control\n\
uint8 fix_two_chamber_valve\n\
";
  }

  static const char* value(const ::three_one_msgs::ReportControlData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::three_one_msgs::ReportControlData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.curvature);
      stream.next(m.speed);
      stream.next(m.rpm);
      stream.next(m.work_mode);
      stream.next(m.gear);
      stream.next(m.turn_to);
      stream.next(m.brake);
      stream.next(m.park);
      stream.next(m.cylinder_select);
      stream.next(m.suspension_select);
      stream.next(m.vertical_wall_mode);
      stream.next(m.suspension_work_mode);
      stream.next(m.suspension_work_mode_detail);
      stream.next(m.suspension_cylinder_select_mode);
      stream.next(m.suspension_cylinder_motor_control);
      stream.next(m.fix_two_chamber_valve);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReportControlData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::three_one_msgs::ReportControlData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::three_one_msgs::ReportControlData_<ContainerAllocator>& v)
  {
    s << indent << "curvature: ";
    Printer<float>::stream(s, indent + "  ", v.curvature);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "rpm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rpm);
    s << indent << "work_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.work_mode);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "turn_to: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_to);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
    s << indent << "park: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.park);
    s << indent << "cylinder_select: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cylinder_select);
    s << indent << "suspension_select: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suspension_select);
    s << indent << "vertical_wall_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vertical_wall_mode);
    s << indent << "suspension_work_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suspension_work_mode);
    s << indent << "suspension_work_mode_detail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suspension_work_mode_detail);
    s << indent << "suspension_cylinder_select_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suspension_cylinder_select_mode);
    s << indent << "suspension_cylinder_motor_control: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suspension_cylinder_motor_control);
    s << indent << "fix_two_chamber_valve: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fix_two_chamber_valve);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THREE_ONE_MSGS_MESSAGE_REPORTCONTROLDATA_H
