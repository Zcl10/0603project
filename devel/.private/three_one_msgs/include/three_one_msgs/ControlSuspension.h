// Generated by gencpp from file three_one_msgs/ControlSuspension.msg
// DO NOT EDIT!


#ifndef THREE_ONE_MSGS_MESSAGE_CONTROLSUSPENSION_H
#define THREE_ONE_MSGS_MESSAGE_CONTROLSUSPENSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace three_one_msgs
{
template <class ContainerAllocator>
struct ControlSuspension_
{
  typedef ControlSuspension_<ContainerAllocator> Type;

  ControlSuspension_()
    : priority(0)
    , cylinder_select(0)
    , suspension_select(0)
    , suspension_work_mode(0)
    , suspension_work_mode_detail(0)
    , suspension_cylinder_select_mode(0)
    , suspension_cylinder_motor_control(0)
    , vertical_wall_mode(0)
    , fix_two_chamber_valve(0)
    , entrenchment(0)  {
    }
  ControlSuspension_(const ContainerAllocator& _alloc)
    : priority(0)
    , cylinder_select(0)
    , suspension_select(0)
    , suspension_work_mode(0)
    , suspension_work_mode_detail(0)
    , suspension_cylinder_select_mode(0)
    , suspension_cylinder_motor_control(0)
    , vertical_wall_mode(0)
    , fix_two_chamber_valve(0)
    , entrenchment(0)  {
  (void)_alloc;
    }



   typedef uint8_t _priority_type;
  _priority_type priority;

   typedef uint8_t _cylinder_select_type;
  _cylinder_select_type cylinder_select;

   typedef uint8_t _suspension_select_type;
  _suspension_select_type suspension_select;

   typedef uint8_t _suspension_work_mode_type;
  _suspension_work_mode_type suspension_work_mode;

   typedef uint8_t _suspension_work_mode_detail_type;
  _suspension_work_mode_detail_type suspension_work_mode_detail;

   typedef uint8_t _suspension_cylinder_select_mode_type;
  _suspension_cylinder_select_mode_type suspension_cylinder_select_mode;

   typedef uint8_t _suspension_cylinder_motor_control_type;
  _suspension_cylinder_motor_control_type suspension_cylinder_motor_control;

   typedef uint8_t _vertical_wall_mode_type;
  _vertical_wall_mode_type vertical_wall_mode;

   typedef uint8_t _fix_two_chamber_valve_type;
  _fix_two_chamber_valve_type fix_two_chamber_valve;

   typedef uint8_t _entrenchment_type;
  _entrenchment_type entrenchment;





  typedef boost::shared_ptr< ::three_one_msgs::ControlSuspension_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::three_one_msgs::ControlSuspension_<ContainerAllocator> const> ConstPtr;

}; // struct ControlSuspension_

typedef ::three_one_msgs::ControlSuspension_<std::allocator<void> > ControlSuspension;

typedef boost::shared_ptr< ::three_one_msgs::ControlSuspension > ControlSuspensionPtr;
typedef boost::shared_ptr< ::three_one_msgs::ControlSuspension const> ControlSuspensionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::three_one_msgs::ControlSuspension_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::three_one_msgs::ControlSuspension_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace three_one_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'three_one_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/three_one_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::three_one_msgs::ControlSuspension_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::three_one_msgs::ControlSuspension_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::three_one_msgs::ControlSuspension_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::three_one_msgs::ControlSuspension_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::three_one_msgs::ControlSuspension_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::three_one_msgs::ControlSuspension_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::three_one_msgs::ControlSuspension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4bc4d758b88c322981bcdaff503bd5e7";
  }

  static const char* value(const ::three_one_msgs::ControlSuspension_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4bc4d758b88c3229ULL;
  static const uint64_t static_value2 = 0x81bcdaff503bd5e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::three_one_msgs::ControlSuspension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "three_one_msgs/ControlSuspension";
  }

  static const char* value(const ::three_one_msgs::ControlSuspension_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::three_one_msgs::ControlSuspension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 priority\n\
uint8 cylinder_select\n\
uint8 suspension_select\n\
uint8 suspension_work_mode\n\
uint8 suspension_work_mode_detail\n\
uint8 suspension_cylinder_select_mode\n\
uint8 suspension_cylinder_motor_control\n\
uint8 vertical_wall_mode\n\
uint8 fix_two_chamber_valve\n\
uint8 entrenchment\n\
";
  }

  static const char* value(const ::three_one_msgs::ControlSuspension_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::three_one_msgs::ControlSuspension_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.priority);
      stream.next(m.cylinder_select);
      stream.next(m.suspension_select);
      stream.next(m.suspension_work_mode);
      stream.next(m.suspension_work_mode_detail);
      stream.next(m.suspension_cylinder_select_mode);
      stream.next(m.suspension_cylinder_motor_control);
      stream.next(m.vertical_wall_mode);
      stream.next(m.fix_two_chamber_valve);
      stream.next(m.entrenchment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlSuspension_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::three_one_msgs::ControlSuspension_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::three_one_msgs::ControlSuspension_<ContainerAllocator>& v)
  {
    s << indent << "priority: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.priority);
    s << indent << "cylinder_select: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cylinder_select);
    s << indent << "suspension_select: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suspension_select);
    s << indent << "suspension_work_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suspension_work_mode);
    s << indent << "suspension_work_mode_detail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suspension_work_mode_detail);
    s << indent << "suspension_cylinder_select_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suspension_cylinder_select_mode);
    s << indent << "suspension_cylinder_motor_control: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suspension_cylinder_motor_control);
    s << indent << "vertical_wall_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vertical_wall_mode);
    s << indent << "fix_two_chamber_valve: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fix_two_chamber_valve);
    s << indent << "entrenchment: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.entrenchment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THREE_ONE_MSGS_MESSAGE_CONTROLSUSPENSION_H
