# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from three_one_msgs/ReportVehicleState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ReportVehicleState(genpy.Message):
  _md5sum = "038961e65ff3db9742a20c76bdc20ca1"
  _type = "three_one_msgs/ReportVehicleState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 error_code
uint8 two_chamber_valve
uint8 vertical_wall_status
uint8 entrenchment
uint8 weapon_330
uint8 weapon_28
uint8 vehicle_height
uint8 tailgate_state
uint8 SOC
int8 vehicle_roll
int8 vehicle_pitch"""
  __slots__ = ['error_code','two_chamber_valve','vertical_wall_status','entrenchment','weapon_330','weapon_28','vehicle_height','tailgate_state','SOC','vehicle_roll','vehicle_pitch']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error_code,two_chamber_valve,vertical_wall_status,entrenchment,weapon_330,weapon_28,vehicle_height,tailgate_state,SOC,vehicle_roll,vehicle_pitch

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReportVehicleState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.error_code is None:
        self.error_code = 0
      if self.two_chamber_valve is None:
        self.two_chamber_valve = 0
      if self.vertical_wall_status is None:
        self.vertical_wall_status = 0
      if self.entrenchment is None:
        self.entrenchment = 0
      if self.weapon_330 is None:
        self.weapon_330 = 0
      if self.weapon_28 is None:
        self.weapon_28 = 0
      if self.vehicle_height is None:
        self.vehicle_height = 0
      if self.tailgate_state is None:
        self.tailgate_state = 0
      if self.SOC is None:
        self.SOC = 0
      if self.vehicle_roll is None:
        self.vehicle_roll = 0
      if self.vehicle_pitch is None:
        self.vehicle_pitch = 0
    else:
      self.error_code = 0
      self.two_chamber_valve = 0
      self.vertical_wall_status = 0
      self.entrenchment = 0
      self.weapon_330 = 0
      self.weapon_28 = 0
      self.vehicle_height = 0
      self.tailgate_state = 0
      self.SOC = 0
      self.vehicle_roll = 0
      self.vehicle_pitch = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9B2b().pack(_x.error_code, _x.two_chamber_valve, _x.vertical_wall_status, _x.entrenchment, _x.weapon_330, _x.weapon_28, _x.vehicle_height, _x.tailgate_state, _x.SOC, _x.vehicle_roll, _x.vehicle_pitch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.error_code, _x.two_chamber_valve, _x.vertical_wall_status, _x.entrenchment, _x.weapon_330, _x.weapon_28, _x.vehicle_height, _x.tailgate_state, _x.SOC, _x.vehicle_roll, _x.vehicle_pitch,) = _get_struct_9B2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9B2b().pack(_x.error_code, _x.two_chamber_valve, _x.vertical_wall_status, _x.entrenchment, _x.weapon_330, _x.weapon_28, _x.vehicle_height, _x.tailgate_state, _x.SOC, _x.vehicle_roll, _x.vehicle_pitch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.error_code, _x.two_chamber_valve, _x.vertical_wall_status, _x.entrenchment, _x.weapon_330, _x.weapon_28, _x.vehicle_height, _x.tailgate_state, _x.SOC, _x.vehicle_roll, _x.vehicle_pitch,) = _get_struct_9B2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9B2b = None
def _get_struct_9B2b():
    global _struct_9B2b
    if _struct_9B2b is None:
        _struct_9B2b = struct.Struct("<9B2b")
    return _struct_9B2b
