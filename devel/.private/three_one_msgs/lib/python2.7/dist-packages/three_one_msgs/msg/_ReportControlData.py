# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from three_one_msgs/ReportControlData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ReportControlData(genpy.Message):
  _md5sum = "a6b97385db9e76f4dfa530144bb3765f"
  _type = "three_one_msgs/ReportControlData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 curvature
float32 speed
uint16 rpm
uint8 work_mode
uint8 gear
uint8 turn_to
uint8 brake
uint8 park
uint8 cylinder_select
uint8 suspension_select
uint8 vertical_wall_mode
uint8 suspension_work_mode
uint8 suspension_work_mode_detail
uint8 suspension_cylinder_select_mode
uint8 suspension_cylinder_motor_control
uint8 fix_two_chamber_valve"""
  __slots__ = ['curvature','speed','rpm','work_mode','gear','turn_to','brake','park','cylinder_select','suspension_select','vertical_wall_mode','suspension_work_mode','suspension_work_mode_detail','suspension_cylinder_select_mode','suspension_cylinder_motor_control','fix_two_chamber_valve']
  _slot_types = ['float32','float32','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       curvature,speed,rpm,work_mode,gear,turn_to,brake,park,cylinder_select,suspension_select,vertical_wall_mode,suspension_work_mode,suspension_work_mode_detail,suspension_cylinder_select_mode,suspension_cylinder_motor_control,fix_two_chamber_valve

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReportControlData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.curvature is None:
        self.curvature = 0.
      if self.speed is None:
        self.speed = 0.
      if self.rpm is None:
        self.rpm = 0
      if self.work_mode is None:
        self.work_mode = 0
      if self.gear is None:
        self.gear = 0
      if self.turn_to is None:
        self.turn_to = 0
      if self.brake is None:
        self.brake = 0
      if self.park is None:
        self.park = 0
      if self.cylinder_select is None:
        self.cylinder_select = 0
      if self.suspension_select is None:
        self.suspension_select = 0
      if self.vertical_wall_mode is None:
        self.vertical_wall_mode = 0
      if self.suspension_work_mode is None:
        self.suspension_work_mode = 0
      if self.suspension_work_mode_detail is None:
        self.suspension_work_mode_detail = 0
      if self.suspension_cylinder_select_mode is None:
        self.suspension_cylinder_select_mode = 0
      if self.suspension_cylinder_motor_control is None:
        self.suspension_cylinder_motor_control = 0
      if self.fix_two_chamber_valve is None:
        self.fix_two_chamber_valve = 0
    else:
      self.curvature = 0.
      self.speed = 0.
      self.rpm = 0
      self.work_mode = 0
      self.gear = 0
      self.turn_to = 0
      self.brake = 0
      self.park = 0
      self.cylinder_select = 0
      self.suspension_select = 0
      self.vertical_wall_mode = 0
      self.suspension_work_mode = 0
      self.suspension_work_mode_detail = 0
      self.suspension_cylinder_select_mode = 0
      self.suspension_cylinder_motor_control = 0
      self.fix_two_chamber_valve = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2fH13B().pack(_x.curvature, _x.speed, _x.rpm, _x.work_mode, _x.gear, _x.turn_to, _x.brake, _x.park, _x.cylinder_select, _x.suspension_select, _x.vertical_wall_mode, _x.suspension_work_mode, _x.suspension_work_mode_detail, _x.suspension_cylinder_select_mode, _x.suspension_cylinder_motor_control, _x.fix_two_chamber_valve))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.curvature, _x.speed, _x.rpm, _x.work_mode, _x.gear, _x.turn_to, _x.brake, _x.park, _x.cylinder_select, _x.suspension_select, _x.vertical_wall_mode, _x.suspension_work_mode, _x.suspension_work_mode_detail, _x.suspension_cylinder_select_mode, _x.suspension_cylinder_motor_control, _x.fix_two_chamber_valve,) = _get_struct_2fH13B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2fH13B().pack(_x.curvature, _x.speed, _x.rpm, _x.work_mode, _x.gear, _x.turn_to, _x.brake, _x.park, _x.cylinder_select, _x.suspension_select, _x.vertical_wall_mode, _x.suspension_work_mode, _x.suspension_work_mode_detail, _x.suspension_cylinder_select_mode, _x.suspension_cylinder_motor_control, _x.fix_two_chamber_valve))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.curvature, _x.speed, _x.rpm, _x.work_mode, _x.gear, _x.turn_to, _x.brake, _x.park, _x.cylinder_select, _x.suspension_select, _x.vertical_wall_mode, _x.suspension_work_mode, _x.suspension_work_mode_detail, _x.suspension_cylinder_select_mode, _x.suspension_cylinder_motor_control, _x.fix_two_chamber_valve,) = _get_struct_2fH13B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fH13B = None
def _get_struct_2fH13B():
    global _struct_2fH13B
    if _struct_2fH13B is None:
        _struct_2fH13B = struct.Struct("<2fH13B")
    return _struct_2fH13B
