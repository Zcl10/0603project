# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from three_one_msgs/ReportCylinderPosition.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ReportCylinderPosition(genpy.Message):
  _md5sum = "10a79bbfdcab9d59df66b73e79bbb8ac"
  _type = "three_one_msgs/ReportCylinderPosition"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 left_one
uint16 left_two
uint16 left_three
uint16 left_four
uint16 right_one
uint16 right_two
uint16 right_three
uint16 right_four"""
  __slots__ = ['left_one','left_two','left_three','left_four','right_one','right_two','right_three','right_four']
  _slot_types = ['uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_one,left_two,left_three,left_four,right_one,right_two,right_three,right_four

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReportCylinderPosition, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left_one is None:
        self.left_one = 0
      if self.left_two is None:
        self.left_two = 0
      if self.left_three is None:
        self.left_three = 0
      if self.left_four is None:
        self.left_four = 0
      if self.right_one is None:
        self.right_one = 0
      if self.right_two is None:
        self.right_two = 0
      if self.right_three is None:
        self.right_three = 0
      if self.right_four is None:
        self.right_four = 0
    else:
      self.left_one = 0
      self.left_two = 0
      self.left_three = 0
      self.left_four = 0
      self.right_one = 0
      self.right_two = 0
      self.right_three = 0
      self.right_four = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8H().pack(_x.left_one, _x.left_two, _x.left_three, _x.left_four, _x.right_one, _x.right_two, _x.right_three, _x.right_four))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.left_one, _x.left_two, _x.left_three, _x.left_four, _x.right_one, _x.right_two, _x.right_three, _x.right_four,) = _get_struct_8H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8H().pack(_x.left_one, _x.left_two, _x.left_three, _x.left_four, _x.right_one, _x.right_two, _x.right_three, _x.right_four))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.left_one, _x.left_two, _x.left_three, _x.left_four, _x.right_one, _x.right_two, _x.right_three, _x.right_four,) = _get_struct_8H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8H = None
def _get_struct_8H():
    global _struct_8H
    if _struct_8H is None:
        _struct_8H = struct.Struct("<8H")
    return _struct_8H
