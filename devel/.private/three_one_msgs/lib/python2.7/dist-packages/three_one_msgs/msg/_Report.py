# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from three_one_msgs/Report.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import three_one_msgs.msg

class Report(genpy.Message):
  _md5sum = "cb7eb1891ce051b9221ffe7f0ad827d8"
  _type = "three_one_msgs/Report"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ReportControlData control
ReportGiveBack give_back
ReportCylinderPressure cylinder_pressure
ReportCylinderPosition cylinder_position
ReportVehicleState vehicle_state
ReportDistance distance
ReportTorque torque
ReportMotion motion
uint8 control_mode
uint8 operation_mode
uint64 counter
================================================================================
MSG: three_one_msgs/ReportControlData
float32 curvature
float32 speed
uint16 rpm
uint8 work_mode
uint8 gear
uint8 turn_to
uint8 brake
uint8 park
uint8 cylinder_select
uint8 suspension_select
uint8 vertical_wall_mode
uint8 suspension_work_mode
uint8 suspension_work_mode_detail
uint8 suspension_cylinder_select_mode
uint8 suspension_cylinder_motor_control
uint8 fix_two_chamber_valve
================================================================================
MSG: three_one_msgs/ReportGiveBack
float32 left_wheel_expect_speed
float32 right_wheel_expect_speed
================================================================================
MSG: three_one_msgs/ReportCylinderPressure
uint8 left_one
uint8 left_two
uint8 left_three
uint8 left_four
uint8 right_one
uint8 right_two
uint8 right_three
uint8 right_four
================================================================================
MSG: three_one_msgs/ReportCylinderPosition
uint16 left_one
uint16 left_two
uint16 left_three
uint16 left_four
uint16 right_one
uint16 right_two
uint16 right_three
uint16 right_four
================================================================================
MSG: three_one_msgs/ReportVehicleState
uint8 error_code
uint8 two_chamber_valve
uint8 vertical_wall_status
uint8 entrenchment
uint8 weapon_330
uint8 weapon_28
uint8 vehicle_height
uint8 tailgate_state
uint8 SOC
int8 vehicle_roll
int8 vehicle_pitch
================================================================================
MSG: three_one_msgs/ReportDistance
uint32 mileage
uint32 left_pulse
uint32 right_pulse
float64 left_distance
float64 right_distance
================================================================================
MSG: three_one_msgs/ReportTorque
int16 left
int16 right
================================================================================
MSG: three_one_msgs/ReportMotion
uint8 spin
uint8 park
uint8 current_gear
uint8 left_wheel_rotate
uint8 right_wheel_rotate
uint16 left_motor_rpm
uint16 right_motor_rpm
float32 mechanical_brake
float64 vehicle_speed
float64 left_wheel_speed  # signed
float64 right_wheel_speed  # signed
float32 curvature"""
  __slots__ = ['control','give_back','cylinder_pressure','cylinder_position','vehicle_state','distance','torque','motion','control_mode','operation_mode','counter']
  _slot_types = ['three_one_msgs/ReportControlData','three_one_msgs/ReportGiveBack','three_one_msgs/ReportCylinderPressure','three_one_msgs/ReportCylinderPosition','three_one_msgs/ReportVehicleState','three_one_msgs/ReportDistance','three_one_msgs/ReportTorque','three_one_msgs/ReportMotion','uint8','uint8','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control,give_back,cylinder_pressure,cylinder_position,vehicle_state,distance,torque,motion,control_mode,operation_mode,counter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Report, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.control is None:
        self.control = three_one_msgs.msg.ReportControlData()
      if self.give_back is None:
        self.give_back = three_one_msgs.msg.ReportGiveBack()
      if self.cylinder_pressure is None:
        self.cylinder_pressure = three_one_msgs.msg.ReportCylinderPressure()
      if self.cylinder_position is None:
        self.cylinder_position = three_one_msgs.msg.ReportCylinderPosition()
      if self.vehicle_state is None:
        self.vehicle_state = three_one_msgs.msg.ReportVehicleState()
      if self.distance is None:
        self.distance = three_one_msgs.msg.ReportDistance()
      if self.torque is None:
        self.torque = three_one_msgs.msg.ReportTorque()
      if self.motion is None:
        self.motion = three_one_msgs.msg.ReportMotion()
      if self.control_mode is None:
        self.control_mode = 0
      if self.operation_mode is None:
        self.operation_mode = 0
      if self.counter is None:
        self.counter = 0
    else:
      self.control = three_one_msgs.msg.ReportControlData()
      self.give_back = three_one_msgs.msg.ReportGiveBack()
      self.cylinder_pressure = three_one_msgs.msg.ReportCylinderPressure()
      self.cylinder_position = three_one_msgs.msg.ReportCylinderPosition()
      self.vehicle_state = three_one_msgs.msg.ReportVehicleState()
      self.distance = three_one_msgs.msg.ReportDistance()
      self.torque = three_one_msgs.msg.ReportTorque()
      self.motion = three_one_msgs.msg.ReportMotion()
      self.control_mode = 0
      self.operation_mode = 0
      self.counter = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2fH13B2f8B8H9B2b3I2d2h5B2Hf3df2BQ().pack(_x.control.curvature, _x.control.speed, _x.control.rpm, _x.control.work_mode, _x.control.gear, _x.control.turn_to, _x.control.brake, _x.control.park, _x.control.cylinder_select, _x.control.suspension_select, _x.control.vertical_wall_mode, _x.control.suspension_work_mode, _x.control.suspension_work_mode_detail, _x.control.suspension_cylinder_select_mode, _x.control.suspension_cylinder_motor_control, _x.control.fix_two_chamber_valve, _x.give_back.left_wheel_expect_speed, _x.give_back.right_wheel_expect_speed, _x.cylinder_pressure.left_one, _x.cylinder_pressure.left_two, _x.cylinder_pressure.left_three, _x.cylinder_pressure.left_four, _x.cylinder_pressure.right_one, _x.cylinder_pressure.right_two, _x.cylinder_pressure.right_three, _x.cylinder_pressure.right_four, _x.cylinder_position.left_one, _x.cylinder_position.left_two, _x.cylinder_position.left_three, _x.cylinder_position.left_four, _x.cylinder_position.right_one, _x.cylinder_position.right_two, _x.cylinder_position.right_three, _x.cylinder_position.right_four, _x.vehicle_state.error_code, _x.vehicle_state.two_chamber_valve, _x.vehicle_state.vertical_wall_status, _x.vehicle_state.entrenchment, _x.vehicle_state.weapon_330, _x.vehicle_state.weapon_28, _x.vehicle_state.vehicle_height, _x.vehicle_state.tailgate_state, _x.vehicle_state.SOC, _x.vehicle_state.vehicle_roll, _x.vehicle_state.vehicle_pitch, _x.distance.mileage, _x.distance.left_pulse, _x.distance.right_pulse, _x.distance.left_distance, _x.distance.right_distance, _x.torque.left, _x.torque.right, _x.motion.spin, _x.motion.park, _x.motion.current_gear, _x.motion.left_wheel_rotate, _x.motion.right_wheel_rotate, _x.motion.left_motor_rpm, _x.motion.right_motor_rpm, _x.motion.mechanical_brake, _x.motion.vehicle_speed, _x.motion.left_wheel_speed, _x.motion.right_wheel_speed, _x.motion.curvature, _x.control_mode, _x.operation_mode, _x.counter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.control is None:
        self.control = three_one_msgs.msg.ReportControlData()
      if self.give_back is None:
        self.give_back = three_one_msgs.msg.ReportGiveBack()
      if self.cylinder_pressure is None:
        self.cylinder_pressure = three_one_msgs.msg.ReportCylinderPressure()
      if self.cylinder_position is None:
        self.cylinder_position = three_one_msgs.msg.ReportCylinderPosition()
      if self.vehicle_state is None:
        self.vehicle_state = three_one_msgs.msg.ReportVehicleState()
      if self.distance is None:
        self.distance = three_one_msgs.msg.ReportDistance()
      if self.torque is None:
        self.torque = three_one_msgs.msg.ReportTorque()
      if self.motion is None:
        self.motion = three_one_msgs.msg.ReportMotion()
      end = 0
      _x = self
      start = end
      end += 149
      (_x.control.curvature, _x.control.speed, _x.control.rpm, _x.control.work_mode, _x.control.gear, _x.control.turn_to, _x.control.brake, _x.control.park, _x.control.cylinder_select, _x.control.suspension_select, _x.control.vertical_wall_mode, _x.control.suspension_work_mode, _x.control.suspension_work_mode_detail, _x.control.suspension_cylinder_select_mode, _x.control.suspension_cylinder_motor_control, _x.control.fix_two_chamber_valve, _x.give_back.left_wheel_expect_speed, _x.give_back.right_wheel_expect_speed, _x.cylinder_pressure.left_one, _x.cylinder_pressure.left_two, _x.cylinder_pressure.left_three, _x.cylinder_pressure.left_four, _x.cylinder_pressure.right_one, _x.cylinder_pressure.right_two, _x.cylinder_pressure.right_three, _x.cylinder_pressure.right_four, _x.cylinder_position.left_one, _x.cylinder_position.left_two, _x.cylinder_position.left_three, _x.cylinder_position.left_four, _x.cylinder_position.right_one, _x.cylinder_position.right_two, _x.cylinder_position.right_three, _x.cylinder_position.right_four, _x.vehicle_state.error_code, _x.vehicle_state.two_chamber_valve, _x.vehicle_state.vertical_wall_status, _x.vehicle_state.entrenchment, _x.vehicle_state.weapon_330, _x.vehicle_state.weapon_28, _x.vehicle_state.vehicle_height, _x.vehicle_state.tailgate_state, _x.vehicle_state.SOC, _x.vehicle_state.vehicle_roll, _x.vehicle_state.vehicle_pitch, _x.distance.mileage, _x.distance.left_pulse, _x.distance.right_pulse, _x.distance.left_distance, _x.distance.right_distance, _x.torque.left, _x.torque.right, _x.motion.spin, _x.motion.park, _x.motion.current_gear, _x.motion.left_wheel_rotate, _x.motion.right_wheel_rotate, _x.motion.left_motor_rpm, _x.motion.right_motor_rpm, _x.motion.mechanical_brake, _x.motion.vehicle_speed, _x.motion.left_wheel_speed, _x.motion.right_wheel_speed, _x.motion.curvature, _x.control_mode, _x.operation_mode, _x.counter,) = _get_struct_2fH13B2f8B8H9B2b3I2d2h5B2Hf3df2BQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2fH13B2f8B8H9B2b3I2d2h5B2Hf3df2BQ().pack(_x.control.curvature, _x.control.speed, _x.control.rpm, _x.control.work_mode, _x.control.gear, _x.control.turn_to, _x.control.brake, _x.control.park, _x.control.cylinder_select, _x.control.suspension_select, _x.control.vertical_wall_mode, _x.control.suspension_work_mode, _x.control.suspension_work_mode_detail, _x.control.suspension_cylinder_select_mode, _x.control.suspension_cylinder_motor_control, _x.control.fix_two_chamber_valve, _x.give_back.left_wheel_expect_speed, _x.give_back.right_wheel_expect_speed, _x.cylinder_pressure.left_one, _x.cylinder_pressure.left_two, _x.cylinder_pressure.left_three, _x.cylinder_pressure.left_four, _x.cylinder_pressure.right_one, _x.cylinder_pressure.right_two, _x.cylinder_pressure.right_three, _x.cylinder_pressure.right_four, _x.cylinder_position.left_one, _x.cylinder_position.left_two, _x.cylinder_position.left_three, _x.cylinder_position.left_four, _x.cylinder_position.right_one, _x.cylinder_position.right_two, _x.cylinder_position.right_three, _x.cylinder_position.right_four, _x.vehicle_state.error_code, _x.vehicle_state.two_chamber_valve, _x.vehicle_state.vertical_wall_status, _x.vehicle_state.entrenchment, _x.vehicle_state.weapon_330, _x.vehicle_state.weapon_28, _x.vehicle_state.vehicle_height, _x.vehicle_state.tailgate_state, _x.vehicle_state.SOC, _x.vehicle_state.vehicle_roll, _x.vehicle_state.vehicle_pitch, _x.distance.mileage, _x.distance.left_pulse, _x.distance.right_pulse, _x.distance.left_distance, _x.distance.right_distance, _x.torque.left, _x.torque.right, _x.motion.spin, _x.motion.park, _x.motion.current_gear, _x.motion.left_wheel_rotate, _x.motion.right_wheel_rotate, _x.motion.left_motor_rpm, _x.motion.right_motor_rpm, _x.motion.mechanical_brake, _x.motion.vehicle_speed, _x.motion.left_wheel_speed, _x.motion.right_wheel_speed, _x.motion.curvature, _x.control_mode, _x.operation_mode, _x.counter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.control is None:
        self.control = three_one_msgs.msg.ReportControlData()
      if self.give_back is None:
        self.give_back = three_one_msgs.msg.ReportGiveBack()
      if self.cylinder_pressure is None:
        self.cylinder_pressure = three_one_msgs.msg.ReportCylinderPressure()
      if self.cylinder_position is None:
        self.cylinder_position = three_one_msgs.msg.ReportCylinderPosition()
      if self.vehicle_state is None:
        self.vehicle_state = three_one_msgs.msg.ReportVehicleState()
      if self.distance is None:
        self.distance = three_one_msgs.msg.ReportDistance()
      if self.torque is None:
        self.torque = three_one_msgs.msg.ReportTorque()
      if self.motion is None:
        self.motion = three_one_msgs.msg.ReportMotion()
      end = 0
      _x = self
      start = end
      end += 149
      (_x.control.curvature, _x.control.speed, _x.control.rpm, _x.control.work_mode, _x.control.gear, _x.control.turn_to, _x.control.brake, _x.control.park, _x.control.cylinder_select, _x.control.suspension_select, _x.control.vertical_wall_mode, _x.control.suspension_work_mode, _x.control.suspension_work_mode_detail, _x.control.suspension_cylinder_select_mode, _x.control.suspension_cylinder_motor_control, _x.control.fix_two_chamber_valve, _x.give_back.left_wheel_expect_speed, _x.give_back.right_wheel_expect_speed, _x.cylinder_pressure.left_one, _x.cylinder_pressure.left_two, _x.cylinder_pressure.left_three, _x.cylinder_pressure.left_four, _x.cylinder_pressure.right_one, _x.cylinder_pressure.right_two, _x.cylinder_pressure.right_three, _x.cylinder_pressure.right_four, _x.cylinder_position.left_one, _x.cylinder_position.left_two, _x.cylinder_position.left_three, _x.cylinder_position.left_four, _x.cylinder_position.right_one, _x.cylinder_position.right_two, _x.cylinder_position.right_three, _x.cylinder_position.right_four, _x.vehicle_state.error_code, _x.vehicle_state.two_chamber_valve, _x.vehicle_state.vertical_wall_status, _x.vehicle_state.entrenchment, _x.vehicle_state.weapon_330, _x.vehicle_state.weapon_28, _x.vehicle_state.vehicle_height, _x.vehicle_state.tailgate_state, _x.vehicle_state.SOC, _x.vehicle_state.vehicle_roll, _x.vehicle_state.vehicle_pitch, _x.distance.mileage, _x.distance.left_pulse, _x.distance.right_pulse, _x.distance.left_distance, _x.distance.right_distance, _x.torque.left, _x.torque.right, _x.motion.spin, _x.motion.park, _x.motion.current_gear, _x.motion.left_wheel_rotate, _x.motion.right_wheel_rotate, _x.motion.left_motor_rpm, _x.motion.right_motor_rpm, _x.motion.mechanical_brake, _x.motion.vehicle_speed, _x.motion.left_wheel_speed, _x.motion.right_wheel_speed, _x.motion.curvature, _x.control_mode, _x.operation_mode, _x.counter,) = _get_struct_2fH13B2f8B8H9B2b3I2d2h5B2Hf3df2BQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fH13B2f8B8H9B2b3I2d2h5B2Hf3df2BQ = None
def _get_struct_2fH13B2f8B8H9B2b3I2d2h5B2Hf3df2BQ():
    global _struct_2fH13B2f8B8H9B2b3I2d2h5B2Hf3df2BQ
    if _struct_2fH13B2f8B8H9B2b3I2d2h5B2Hf3df2BQ is None:
        _struct_2fH13B2f8B8H9B2b3I2d2h5B2Hf3df2BQ = struct.Struct("<2fH13B2f8B8H9B2b3I2d2h5B2Hf3df2BQ")
    return _struct_2fH13B2f8B8H9B2b3I2d2h5B2Hf3df2BQ
