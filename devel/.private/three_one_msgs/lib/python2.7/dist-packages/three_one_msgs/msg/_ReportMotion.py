# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from three_one_msgs/ReportMotion.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ReportMotion(genpy.Message):
  _md5sum = "60fe6a6e7ba2e99db01da0cfbfd1bb49"
  _type = "three_one_msgs/ReportMotion"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 spin
uint8 park
uint8 current_gear
uint8 left_wheel_rotate
uint8 right_wheel_rotate
uint16 left_motor_rpm
uint16 right_motor_rpm
float32 mechanical_brake
float64 vehicle_speed
float64 left_wheel_speed  # signed
float64 right_wheel_speed  # signed
float32 curvature"""
  __slots__ = ['spin','park','current_gear','left_wheel_rotate','right_wheel_rotate','left_motor_rpm','right_motor_rpm','mechanical_brake','vehicle_speed','left_wheel_speed','right_wheel_speed','curvature']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint16','uint16','float32','float64','float64','float64','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       spin,park,current_gear,left_wheel_rotate,right_wheel_rotate,left_motor_rpm,right_motor_rpm,mechanical_brake,vehicle_speed,left_wheel_speed,right_wheel_speed,curvature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReportMotion, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.spin is None:
        self.spin = 0
      if self.park is None:
        self.park = 0
      if self.current_gear is None:
        self.current_gear = 0
      if self.left_wheel_rotate is None:
        self.left_wheel_rotate = 0
      if self.right_wheel_rotate is None:
        self.right_wheel_rotate = 0
      if self.left_motor_rpm is None:
        self.left_motor_rpm = 0
      if self.right_motor_rpm is None:
        self.right_motor_rpm = 0
      if self.mechanical_brake is None:
        self.mechanical_brake = 0.
      if self.vehicle_speed is None:
        self.vehicle_speed = 0.
      if self.left_wheel_speed is None:
        self.left_wheel_speed = 0.
      if self.right_wheel_speed is None:
        self.right_wheel_speed = 0.
      if self.curvature is None:
        self.curvature = 0.
    else:
      self.spin = 0
      self.park = 0
      self.current_gear = 0
      self.left_wheel_rotate = 0
      self.right_wheel_rotate = 0
      self.left_motor_rpm = 0
      self.right_motor_rpm = 0
      self.mechanical_brake = 0.
      self.vehicle_speed = 0.
      self.left_wheel_speed = 0.
      self.right_wheel_speed = 0.
      self.curvature = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5B2Hf3df().pack(_x.spin, _x.park, _x.current_gear, _x.left_wheel_rotate, _x.right_wheel_rotate, _x.left_motor_rpm, _x.right_motor_rpm, _x.mechanical_brake, _x.vehicle_speed, _x.left_wheel_speed, _x.right_wheel_speed, _x.curvature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.spin, _x.park, _x.current_gear, _x.left_wheel_rotate, _x.right_wheel_rotate, _x.left_motor_rpm, _x.right_motor_rpm, _x.mechanical_brake, _x.vehicle_speed, _x.left_wheel_speed, _x.right_wheel_speed, _x.curvature,) = _get_struct_5B2Hf3df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5B2Hf3df().pack(_x.spin, _x.park, _x.current_gear, _x.left_wheel_rotate, _x.right_wheel_rotate, _x.left_motor_rpm, _x.right_motor_rpm, _x.mechanical_brake, _x.vehicle_speed, _x.left_wheel_speed, _x.right_wheel_speed, _x.curvature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.spin, _x.park, _x.current_gear, _x.left_wheel_rotate, _x.right_wheel_rotate, _x.left_motor_rpm, _x.right_motor_rpm, _x.mechanical_brake, _x.vehicle_speed, _x.left_wheel_speed, _x.right_wheel_speed, _x.curvature,) = _get_struct_5B2Hf3df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B2Hf3df = None
def _get_struct_5B2Hf3df():
    global _struct_5B2Hf3df
    if _struct_5B2Hf3df is None:
        _struct_5B2Hf3df = struct.Struct("<5B2Hf3df")
    return _struct_5B2Hf3df
