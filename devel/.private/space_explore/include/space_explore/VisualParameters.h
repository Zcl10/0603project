// *********************************************************
//
// File autogenerated for the space_explore package
// by the rosparam_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <ros/param.h>
#include <ros/node_handle.h>
#include <rosparam_handler/utilities.hpp>
#ifdef DYNAMIC_RECONFIGURE_FOUND
#include <space_explore/VisualConfig.h>
#else
struct VisualConfig{};
#endif


namespace space_explore {

/// \brief Parameter struct generated by rosparam_handler
struct VisualParameters {

  using Config = VisualConfig;

  VisualParameters(const ros::NodeHandle& private_node_handle)
  : globalNamespace{"/"},
    privateNamespace{private_node_handle.getNamespace() + "/"},
    nodeName{rosparam_handler::getNodeName(private_node_handle)} {}

  /// \brief Get values from parameter server
  /// 
  /// Will fail if a value can not be found and no default value is given.
  void fromParamServer(){
    bool success = true;
    success &= rosparam_handler::getParam(privateNamespace + "enable_display", enable_display, bool{false});
    success &= rosparam_handler::getParam(privateNamespace + "shared_colors", shared_colors, int{10});
    rosparam_handler::testConstParam(privateNamespace + "shared_colors_BLACK");
    rosparam_handler::testConstParam(privateNamespace + "shared_colors_PINK");
    rosparam_handler::testConstParam(privateNamespace + "shared_colors_SKY_BLUE");
    rosparam_handler::testConstParam(privateNamespace + "shared_colors_LIGHT_GREEN");
    rosparam_handler::testConstParam(privateNamespace + "shared_colors_GREY");
    rosparam_handler::testConstParam(privateNamespace + "shared_colors_WHITE");
    rosparam_handler::testConstParam(privateNamespace + "shared_colors_CYAN");
    rosparam_handler::testConstParam(privateNamespace + "shared_colors_BLUE");
    rosparam_handler::testConstParam(privateNamespace + "shared_colors_DARK_CYAN");
    rosparam_handler::testConstParam(privateNamespace + "shared_colors_GREEN");
    rosparam_handler::testConstParam(privateNamespace + "shared_colors_RED");
    success &= rosparam_handler::getParam(privateNamespace + "start_marker_size", start_marker_size, double{1.0});
    success &= rosparam_handler::getParam(privateNamespace + "start_marker_name", start_marker_name, std::string{"start"});
    success &= rosparam_handler::getParam(privateNamespace + "start_marker_frame", start_marker_frame, std::string{"/map"});
    success &= rosparam_handler::getParam(privateNamespace + "start_marker_alpha", start_marker_alpha, double{1.0});
    success &= rosparam_handler::getParam(privateNamespace + "start_marker_color", start_marker_color, int{7});
    success &= rosparam_handler::getParam(privateNamespace + "goal_marker_size", goal_marker_size, double{1.0});
    success &= rosparam_handler::getParam(privateNamespace + "goal_marker_name", goal_marker_name, std::string{"goal"});
    success &= rosparam_handler::getParam(privateNamespace + "goal_marker_frame", goal_marker_frame, std::string{"/map"});
    success &= rosparam_handler::getParam(privateNamespace + "goal_marker_alpha", goal_marker_alpha, double{1.0});
    success &= rosparam_handler::getParam(privateNamespace + "goal_marker_color", goal_marker_color, int{9});
    success &= rosparam_handler::getParam(privateNamespace + "circle_marker_size", circle_marker_size, double{0.1});
    success &= rosparam_handler::getParam(privateNamespace + "circle_marker_name", circle_marker_name, std::string{"circle"});
    success &= rosparam_handler::getParam(privateNamespace + "circle_marker_frame", circle_marker_frame, std::string{"/map"});
    success &= rosparam_handler::getParam(privateNamespace + "circle_marker_alpha", circle_marker_alpha, double{1.0});
    success &= rosparam_handler::getParam(privateNamespace + "circle_marker_color", circle_marker_color, int{8});
    success &= rosparam_handler::getParam(privateNamespace + "enable_internal_path_display", enable_internal_path_display, bool{false});
    success &= rosparam_handler::getParam(privateNamespace + "inter_path_width", inter_path_width, double{0.08});
    success &= rosparam_handler::getParam(privateNamespace + "inter_path_name", inter_path_name, std::string{"inter_path"});
    success &= rosparam_handler::getParam(privateNamespace + "inter_path_marker_frame", inter_path_marker_frame, std::string{"/map"});
    success &= rosparam_handler::getParam(privateNamespace + "inter_path_marker_alpha", inter_path_marker_alpha, double{1.0});
    success &= rosparam_handler::getParam(privateNamespace + "inter_path_marker_color", inter_path_marker_color, int{0});
    success &= rosparam_handler::getParam(privateNamespace + "path_node_size", path_node_size, double{0.2});
    success &= rosparam_handler::getParam(privateNamespace + "path_node_name", path_node_name, std::string{"path_node"});
    success &= rosparam_handler::getParam(privateNamespace + "path_node_frame", path_node_frame, std::string{"/map"});
    success &= rosparam_handler::getParam(privateNamespace + "path_node_alpha", path_node_alpha, double{1.0});
    success &= rosparam_handler::getParam(privateNamespace + "path_node_color", path_node_color, int{10});
    success &= rosparam_handler::getParam(privateNamespace + "circle_path_width", circle_path_width, double{0.1});
    success &= rosparam_handler::getParam(privateNamespace + "circle_path_name", circle_path_name, std::string{"circle_path"});
    success &= rosparam_handler::getParam(privateNamespace + "circle_path_frame", circle_path_frame, std::string{"/map"});
    success &= rosparam_handler::getParam(privateNamespace + "circle_path_alpha", circle_path_alpha, double{1.0});
    success &= rosparam_handler::getParam(privateNamespace + "circle_path_color", circle_path_color, int{10});
    success &= rosparam_handler::getParam(privateNamespace + "circle_path_node_size", circle_path_node_size, double{0.3});
    success &= rosparam_handler::getParam(privateNamespace + "circle_path_node_name", circle_path_node_name, std::string{"circle_path_node"});
    success &= rosparam_handler::getParam(privateNamespace + "circle_path_node_frame", circle_path_node_frame, std::string{"/map"});
    success &= rosparam_handler::getParam(privateNamespace + "circle_path_node_alpha", circle_path_node_alpha, double{1.0});
    success &= rosparam_handler::getParam(privateNamespace + "circle_path_node_color", circle_path_node_color, int{0});
    success &= rosparam_handler::getParam(privateNamespace + "enable_final_path_display", enable_final_path_display, bool{false});
    success &= rosparam_handler::getParam(privateNamespace + "final_path_width", final_path_width, double{0.15});
    success &= rosparam_handler::getParam(privateNamespace + "final_path_name", final_path_name, std::string{"final_path"});
    success &= rosparam_handler::getParam(privateNamespace + "final_path_frame", final_path_frame, std::string{"/map"});
    success &= rosparam_handler::getParam(privateNamespace + "final_path_alpha", final_path_alpha, double{1.0});
    success &= rosparam_handler::getParam(privateNamespace + "final_path_color", final_path_color, int{9});
    rosparam_handler::testMin<double>(privateNamespace + "start_marker_size", start_marker_size, 0.5);
    rosparam_handler::testMax<double>(privateNamespace + "start_marker_size", start_marker_size, 4);
    rosparam_handler::testMin<double>(privateNamespace + "start_marker_alpha", start_marker_alpha, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "start_marker_alpha", start_marker_alpha, 1.0);
    rosparam_handler::testMin<double>(privateNamespace + "goal_marker_size", goal_marker_size, 0.5);
    rosparam_handler::testMax<double>(privateNamespace + "goal_marker_size", goal_marker_size, 4);
    rosparam_handler::testMin<double>(privateNamespace + "goal_marker_alpha", goal_marker_alpha, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "goal_marker_alpha", goal_marker_alpha, 1.0);
    rosparam_handler::testMin<double>(privateNamespace + "circle_marker_size", circle_marker_size, 0.05);
    rosparam_handler::testMax<double>(privateNamespace + "circle_marker_size", circle_marker_size, 0.3);
    rosparam_handler::testMin<double>(privateNamespace + "circle_marker_alpha", circle_marker_alpha, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "circle_marker_alpha", circle_marker_alpha, 1.0);
    rosparam_handler::testMin<double>(privateNamespace + "inter_path_width", inter_path_width, 0.05);
    rosparam_handler::testMax<double>(privateNamespace + "inter_path_width", inter_path_width, 0.3);
    rosparam_handler::testMin<double>(privateNamespace + "inter_path_marker_alpha", inter_path_marker_alpha, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "inter_path_marker_alpha", inter_path_marker_alpha, 1.0);
    rosparam_handler::testMin<double>(privateNamespace + "path_node_size", path_node_size, 0.05);
    rosparam_handler::testMax<double>(privateNamespace + "path_node_size", path_node_size, 0.5);
    rosparam_handler::testMin<double>(privateNamespace + "path_node_alpha", path_node_alpha, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "path_node_alpha", path_node_alpha, 1.0);
    rosparam_handler::testMin<double>(privateNamespace + "circle_path_width", circle_path_width, 0.01);
    rosparam_handler::testMax<double>(privateNamespace + "circle_path_width", circle_path_width, 0.3);
    rosparam_handler::testMin<double>(privateNamespace + "circle_path_alpha", circle_path_alpha, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "circle_path_alpha", circle_path_alpha, 1.0);
    rosparam_handler::testMin<double>(privateNamespace + "circle_path_node_size", circle_path_node_size, 0.05);
    rosparam_handler::testMax<double>(privateNamespace + "circle_path_node_size", circle_path_node_size, 0.5);
    rosparam_handler::testMin<double>(privateNamespace + "circle_path_node_alpha", circle_path_node_alpha, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "circle_path_node_alpha", circle_path_node_alpha, 1.0);
    rosparam_handler::testMin<double>(privateNamespace + "final_path_width", final_path_width, 0.01);
    rosparam_handler::testMax<double>(privateNamespace + "final_path_width", final_path_width, 0.3);
    rosparam_handler::testMin<double>(privateNamespace + "final_path_alpha", final_path_alpha, 0.0);
    rosparam_handler::testMax<double>(privateNamespace + "final_path_alpha", final_path_alpha, 1.0);
    if(!success){
      missingParamsWarning();
      rosparam_handler::exit("RosparamHandler: GetParam could net retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
  }

  /// \brief Set parameters on ROS parameter server.
  void toParamServer(){
  rosparam_handler::setParam(privateNamespace + "enable_display",enable_display);
  rosparam_handler::setParam(privateNamespace + "shared_colors",shared_colors);
  rosparam_handler::setParam(privateNamespace + "start_marker_size",start_marker_size);
  rosparam_handler::setParam(privateNamespace + "start_marker_name",start_marker_name);
  rosparam_handler::setParam(privateNamespace + "start_marker_frame",start_marker_frame);
  rosparam_handler::setParam(privateNamespace + "start_marker_alpha",start_marker_alpha);
  rosparam_handler::setParam(privateNamespace + "start_marker_color",start_marker_color);
  rosparam_handler::setParam(privateNamespace + "goal_marker_size",goal_marker_size);
  rosparam_handler::setParam(privateNamespace + "goal_marker_name",goal_marker_name);
  rosparam_handler::setParam(privateNamespace + "goal_marker_frame",goal_marker_frame);
  rosparam_handler::setParam(privateNamespace + "goal_marker_alpha",goal_marker_alpha);
  rosparam_handler::setParam(privateNamespace + "goal_marker_color",goal_marker_color);
  rosparam_handler::setParam(privateNamespace + "circle_marker_size",circle_marker_size);
  rosparam_handler::setParam(privateNamespace + "circle_marker_name",circle_marker_name);
  rosparam_handler::setParam(privateNamespace + "circle_marker_frame",circle_marker_frame);
  rosparam_handler::setParam(privateNamespace + "circle_marker_alpha",circle_marker_alpha);
  rosparam_handler::setParam(privateNamespace + "circle_marker_color",circle_marker_color);
  rosparam_handler::setParam(privateNamespace + "enable_internal_path_display",enable_internal_path_display);
  rosparam_handler::setParam(privateNamespace + "inter_path_width",inter_path_width);
  rosparam_handler::setParam(privateNamespace + "inter_path_name",inter_path_name);
  rosparam_handler::setParam(privateNamespace + "inter_path_marker_frame",inter_path_marker_frame);
  rosparam_handler::setParam(privateNamespace + "inter_path_marker_alpha",inter_path_marker_alpha);
  rosparam_handler::setParam(privateNamespace + "inter_path_marker_color",inter_path_marker_color);
  rosparam_handler::setParam(privateNamespace + "path_node_size",path_node_size);
  rosparam_handler::setParam(privateNamespace + "path_node_name",path_node_name);
  rosparam_handler::setParam(privateNamespace + "path_node_frame",path_node_frame);
  rosparam_handler::setParam(privateNamespace + "path_node_alpha",path_node_alpha);
  rosparam_handler::setParam(privateNamespace + "path_node_color",path_node_color);
  rosparam_handler::setParam(privateNamespace + "circle_path_width",circle_path_width);
  rosparam_handler::setParam(privateNamespace + "circle_path_name",circle_path_name);
  rosparam_handler::setParam(privateNamespace + "circle_path_frame",circle_path_frame);
  rosparam_handler::setParam(privateNamespace + "circle_path_alpha",circle_path_alpha);
  rosparam_handler::setParam(privateNamespace + "circle_path_color",circle_path_color);
  rosparam_handler::setParam(privateNamespace + "circle_path_node_size",circle_path_node_size);
  rosparam_handler::setParam(privateNamespace + "circle_path_node_name",circle_path_node_name);
  rosparam_handler::setParam(privateNamespace + "circle_path_node_frame",circle_path_node_frame);
  rosparam_handler::setParam(privateNamespace + "circle_path_node_alpha",circle_path_node_alpha);
  rosparam_handler::setParam(privateNamespace + "circle_path_node_color",circle_path_node_color);
  rosparam_handler::setParam(privateNamespace + "enable_final_path_display",enable_final_path_display);
  rosparam_handler::setParam(privateNamespace + "final_path_width",final_path_width);
  rosparam_handler::setParam(privateNamespace + "final_path_name",final_path_name);
  rosparam_handler::setParam(privateNamespace + "final_path_frame",final_path_frame);
  rosparam_handler::setParam(privateNamespace + "final_path_alpha",final_path_alpha);
  rosparam_handler::setParam(privateNamespace + "final_path_color",final_path_color);        
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0){
#ifdef DYNAMIC_RECONFIGURE_FOUND
    shared_colors = config.shared_colors;
    start_marker_size = config.start_marker_size;
    start_marker_frame = config.start_marker_frame;
    start_marker_alpha = config.start_marker_alpha;
    start_marker_color = config.start_marker_color;
    goal_marker_size = config.goal_marker_size;
    goal_marker_frame = config.goal_marker_frame;
    goal_marker_alpha = config.goal_marker_alpha;
    goal_marker_color = config.goal_marker_color;
    circle_marker_size = config.circle_marker_size;
    circle_marker_frame = config.circle_marker_frame;
    circle_marker_alpha = config.circle_marker_alpha;
    circle_marker_color = config.circle_marker_color;
    enable_internal_path_display = config.enable_internal_path_display;
    inter_path_width = config.inter_path_width;
    inter_path_marker_frame = config.inter_path_marker_frame;
    inter_path_marker_alpha = config.inter_path_marker_alpha;
    inter_path_marker_color = config.inter_path_marker_color;
    path_node_size = config.path_node_size;
    path_node_frame = config.path_node_frame;
    path_node_alpha = config.path_node_alpha;
    path_node_color = config.path_node_color;
    circle_path_width = config.circle_path_width;
    circle_path_frame = config.circle_path_frame;
    circle_path_alpha = config.circle_path_alpha;
    circle_path_color = config.circle_path_color;
    circle_path_node_size = config.circle_path_node_size;
    circle_path_node_frame = config.circle_path_node_frame;
    circle_path_node_alpha = config.circle_path_node_alpha;
    circle_path_node_color = config.circle_path_node_color;
    enable_final_path_display = config.enable_final_path_display;
    final_path_width = config.final_path_width;
    final_path_frame = config.final_path_frame;
    final_path_alpha = config.final_path_alpha;
    final_path_color = config.final_path_color;
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
  rosparam_handler::exit("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  void toConfig(Config& config){
#ifdef DYNAMIC_RECONFIGURE_FOUND
       config.shared_colors = shared_colors;
   config.start_marker_size = start_marker_size;
   config.start_marker_frame = start_marker_frame;
   config.start_marker_alpha = start_marker_alpha;
   config.start_marker_color = start_marker_color;
   config.goal_marker_size = goal_marker_size;
   config.goal_marker_frame = goal_marker_frame;
   config.goal_marker_alpha = goal_marker_alpha;
   config.goal_marker_color = goal_marker_color;
   config.circle_marker_size = circle_marker_size;
   config.circle_marker_frame = circle_marker_frame;
   config.circle_marker_alpha = circle_marker_alpha;
   config.circle_marker_color = circle_marker_color;
   config.enable_internal_path_display = enable_internal_path_display;
   config.inter_path_width = inter_path_width;
   config.inter_path_marker_frame = inter_path_marker_frame;
   config.inter_path_marker_alpha = inter_path_marker_alpha;
   config.inter_path_marker_color = inter_path_marker_color;
   config.path_node_size = path_node_size;
   config.path_node_frame = path_node_frame;
   config.path_node_alpha = path_node_alpha;
   config.path_node_color = path_node_color;
   config.circle_path_width = circle_path_width;
   config.circle_path_frame = circle_path_frame;
   config.circle_path_alpha = circle_path_alpha;
   config.circle_path_color = circle_path_color;
   config.circle_path_node_size = circle_path_node_size;
   config.circle_path_node_frame = circle_path_node_frame;
   config.circle_path_node_alpha = circle_path_node_alpha;
   config.circle_path_node_color = circle_path_node_color;
   config.enable_final_path_display = enable_final_path_display;
   config.final_path_width = final_path_width;
   config.final_path_frame = final_path_frame;
   config.final_path_alpha = final_path_alpha;
   config.final_path_color = final_path_color;
#else
      ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So toConfig() is not available. Please recompile with dynamic_reconfigure.");
      rosparam_handler::exit("dynamic_reconfigure was not found during compilation. So toConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const VisualParameters& p)
  {
    os << "[" << p.nodeName << "]\nNode " << p.nodeName << " has the following parameters:\n"
      << "	" << p.privateNamespace << "enable_display:" << p.enable_display << "\n"
      << "	" << p.privateNamespace << "shared_colors:" << p.shared_colors << "\n"
      << "	" << p.privateNamespace << "shared_colors_BLACK:" << p.shared_colors_BLACK << "\n"
      << "	" << p.privateNamespace << "shared_colors_PINK:" << p.shared_colors_PINK << "\n"
      << "	" << p.privateNamespace << "shared_colors_SKY_BLUE:" << p.shared_colors_SKY_BLUE << "\n"
      << "	" << p.privateNamespace << "shared_colors_LIGHT_GREEN:" << p.shared_colors_LIGHT_GREEN << "\n"
      << "	" << p.privateNamespace << "shared_colors_GREY:" << p.shared_colors_GREY << "\n"
      << "	" << p.privateNamespace << "shared_colors_WHITE:" << p.shared_colors_WHITE << "\n"
      << "	" << p.privateNamespace << "shared_colors_CYAN:" << p.shared_colors_CYAN << "\n"
      << "	" << p.privateNamespace << "shared_colors_BLUE:" << p.shared_colors_BLUE << "\n"
      << "	" << p.privateNamespace << "shared_colors_DARK_CYAN:" << p.shared_colors_DARK_CYAN << "\n"
      << "	" << p.privateNamespace << "shared_colors_GREEN:" << p.shared_colors_GREEN << "\n"
      << "	" << p.privateNamespace << "shared_colors_RED:" << p.shared_colors_RED << "\n"
      << "	" << p.privateNamespace << "start_marker_size:" << p.start_marker_size << "\n"
      << "	" << p.privateNamespace << "start_marker_name:" << p.start_marker_name << "\n"
      << "	" << p.privateNamespace << "start_marker_frame:" << p.start_marker_frame << "\n"
      << "	" << p.privateNamespace << "start_marker_alpha:" << p.start_marker_alpha << "\n"
      << "	" << p.privateNamespace << "start_marker_color:" << p.start_marker_color << "\n"
      << "	" << p.privateNamespace << "goal_marker_size:" << p.goal_marker_size << "\n"
      << "	" << p.privateNamespace << "goal_marker_name:" << p.goal_marker_name << "\n"
      << "	" << p.privateNamespace << "goal_marker_frame:" << p.goal_marker_frame << "\n"
      << "	" << p.privateNamespace << "goal_marker_alpha:" << p.goal_marker_alpha << "\n"
      << "	" << p.privateNamespace << "goal_marker_color:" << p.goal_marker_color << "\n"
      << "	" << p.privateNamespace << "circle_marker_size:" << p.circle_marker_size << "\n"
      << "	" << p.privateNamespace << "circle_marker_name:" << p.circle_marker_name << "\n"
      << "	" << p.privateNamespace << "circle_marker_frame:" << p.circle_marker_frame << "\n"
      << "	" << p.privateNamespace << "circle_marker_alpha:" << p.circle_marker_alpha << "\n"
      << "	" << p.privateNamespace << "circle_marker_color:" << p.circle_marker_color << "\n"
      << "	" << p.privateNamespace << "enable_internal_path_display:" << p.enable_internal_path_display << "\n"
      << "	" << p.privateNamespace << "inter_path_width:" << p.inter_path_width << "\n"
      << "	" << p.privateNamespace << "inter_path_name:" << p.inter_path_name << "\n"
      << "	" << p.privateNamespace << "inter_path_marker_frame:" << p.inter_path_marker_frame << "\n"
      << "	" << p.privateNamespace << "inter_path_marker_alpha:" << p.inter_path_marker_alpha << "\n"
      << "	" << p.privateNamespace << "inter_path_marker_color:" << p.inter_path_marker_color << "\n"
      << "	" << p.privateNamespace << "path_node_size:" << p.path_node_size << "\n"
      << "	" << p.privateNamespace << "path_node_name:" << p.path_node_name << "\n"
      << "	" << p.privateNamespace << "path_node_frame:" << p.path_node_frame << "\n"
      << "	" << p.privateNamespace << "path_node_alpha:" << p.path_node_alpha << "\n"
      << "	" << p.privateNamespace << "path_node_color:" << p.path_node_color << "\n"
      << "	" << p.privateNamespace << "circle_path_width:" << p.circle_path_width << "\n"
      << "	" << p.privateNamespace << "circle_path_name:" << p.circle_path_name << "\n"
      << "	" << p.privateNamespace << "circle_path_frame:" << p.circle_path_frame << "\n"
      << "	" << p.privateNamespace << "circle_path_alpha:" << p.circle_path_alpha << "\n"
      << "	" << p.privateNamespace << "circle_path_color:" << p.circle_path_color << "\n"
      << "	" << p.privateNamespace << "circle_path_node_size:" << p.circle_path_node_size << "\n"
      << "	" << p.privateNamespace << "circle_path_node_name:" << p.circle_path_node_name << "\n"
      << "	" << p.privateNamespace << "circle_path_node_frame:" << p.circle_path_node_frame << "\n"
      << "	" << p.privateNamespace << "circle_path_node_alpha:" << p.circle_path_node_alpha << "\n"
      << "	" << p.privateNamespace << "circle_path_node_color:" << p.circle_path_node_color << "\n"
      << "	" << p.privateNamespace << "enable_final_path_display:" << p.enable_final_path_display << "\n"
      << "	" << p.privateNamespace << "final_path_width:" << p.final_path_width << "\n"
      << "	" << p.privateNamespace << "final_path_name:" << p.final_path_name << "\n"
      << "	" << p.privateNamespace << "final_path_frame:" << p.final_path_frame << "\n"
      << "	" << p.privateNamespace << "final_path_alpha:" << p.final_path_alpha << "\n"
      << "	" << p.privateNamespace << "final_path_color:" << p.final_path_color << "\n"
;
    return os;
  }

    bool enable_display; /*!< Display Visualization */
  int shared_colors; /*!< start_marker_color */
  static constexpr auto shared_colors_BLACK = 0; /*!< Constant for enum shared_colors */
  static constexpr auto shared_colors_PINK = 1; /*!< Constant for enum shared_colors */
  static constexpr auto shared_colors_SKY_BLUE = 2; /*!< Constant for enum shared_colors */
  static constexpr auto shared_colors_LIGHT_GREEN = 3; /*!< Constant for enum shared_colors */
  static constexpr auto shared_colors_GREY = 4; /*!< Constant for enum shared_colors */
  static constexpr auto shared_colors_WHITE = 5; /*!< Constant for enum shared_colors */
  static constexpr auto shared_colors_CYAN = 6; /*!< Constant for enum shared_colors */
  static constexpr auto shared_colors_BLUE = 7; /*!< Constant for enum shared_colors */
  static constexpr auto shared_colors_DARK_CYAN = 8; /*!< Constant for enum shared_colors */
  static constexpr auto shared_colors_GREEN = 9; /*!< Constant for enum shared_colors */
  static constexpr auto shared_colors_RED = 10; /*!< Constant for enum shared_colors */
  double start_marker_size; /*!< Start Marker Size */
  std::string start_marker_name; /*!< Marker Name */
  std::string start_marker_frame; /*!< Marker Frame */
  double start_marker_alpha; /*!< Start Marker alpha */
  int start_marker_color; /*!< Start Marker alpha */
  double goal_marker_size; /*!< Goal Marker Size */
  std::string goal_marker_name; /*!< Marker Name */
  std::string goal_marker_frame; /*!< Marker Frame */
  double goal_marker_alpha; /*!< Goal Marker alpha */
  int goal_marker_color; /*!< Goal Marker alpha */
  double circle_marker_size; /*!< Circle Marker Size */
  std::string circle_marker_name; /*!< Marker Name */
  std::string circle_marker_frame; /*!< Marker Frame */
  double circle_marker_alpha; /*!< Circle Marker alpha */
  int circle_marker_color; /*!< Circle Marker alpha */
  bool enable_internal_path_display; /*!< Enable internal path display */
  double inter_path_width; /*!< Path Width */
  std::string inter_path_name; /*!< Path Marker Name */
  std::string inter_path_marker_frame; /*!< Path Marker Frame */
  double inter_path_marker_alpha; /*!< Path Marker alpha */
  int inter_path_marker_color; /*!< Path Marker alpha */
  double path_node_size; /*!< Path Node Size */
  std::string path_node_name; /*!< Path Node Marker Name */
  std::string path_node_frame; /*!< Path Node Marker Frame */
  double path_node_alpha; /*!< Path Node Marker alpha */
  int path_node_color; /*!< Path Node Marker alpha */
  double circle_path_width; /*!< Path Width */
  std::string circle_path_name; /*!< Circle Path Marker */
  std::string circle_path_frame; /*!< Circle Path Frame */
  double circle_path_alpha; /*!< Circle Path Alpha */
  int circle_path_color; /*!< Path Node Color */
  double circle_path_node_size; /*!< Circle Path Node Size */
  std::string circle_path_node_name; /*!< Circle Path Node Marker Name */
  std::string circle_path_node_frame; /*!< Circle Path Node Marker Frame */
  double circle_path_node_alpha; /*!< Circle Path Node Marker alpha */
  int circle_path_node_color; /*!< Circle Path Node Marker alpha */
  bool enable_final_path_display; /*!< Enable final path display */
  double final_path_width; /*!< Path Width */
  std::string final_path_name; /*!< final Path Marker */
  std::string final_path_frame; /*!< final Path Frame */
  double final_path_alpha; /*!< Circle Path Alpha */
  int final_path_color; /*!< Final Path Color */

private:
  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << nodeName << "]\nThe following parameters do not have default values and need to be specified:\n"
    );
  }

  const std::string globalNamespace;
  const std::string privateNamespace;
  const std::string nodeName;
};

} // namespace space_explore
