// Generated by gencpp from file control_msgs/Rawdata.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_RAWDATA_H
#define CONTROL_MSGS_MESSAGE_RAWDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control_msgs
{
template <class ContainerAllocator>
struct Rawdata_
{
  typedef Rawdata_<ContainerAllocator> Type;

  Rawdata_()
    : ros_time(0.0)
    , data()  {
    }
  Rawdata_(const ContainerAllocator& _alloc)
    : ros_time(0.0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef double _ros_time_type;
  _ros_time_type ros_time;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::control_msgs::Rawdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::Rawdata_<ContainerAllocator> const> ConstPtr;

}; // struct Rawdata_

typedef ::control_msgs::Rawdata_<std::allocator<void> > Rawdata;

typedef boost::shared_ptr< ::control_msgs::Rawdata > RawdataPtr;
typedef boost::shared_ptr< ::control_msgs::Rawdata const> RawdataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::Rawdata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::Rawdata_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_driver_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/sensor_driver_msgs/msg'], 'control_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/control_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::Rawdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::Rawdata_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::Rawdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::Rawdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::Rawdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::Rawdata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::Rawdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a34d701bf319ec12f678fa7cb20e57e3";
  }

  static const char* value(const ::control_msgs::Rawdata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa34d701bf319ec12ULL;
  static const uint64_t static_value2 = 0xf678fa7cb20e57e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::Rawdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/Rawdata";
  }

  static const char* value(const ::control_msgs::Rawdata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::Rawdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 ros_time\n\
uint8[] data\n\
";
  }

  static const char* value(const ::control_msgs::Rawdata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::Rawdata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ros_time);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Rawdata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::Rawdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::Rawdata_<ContainerAllocator>& v)
  {
    s << indent << "ros_time: ";
    Printer<double>::stream(s, indent + "  ", v.ros_time);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_RAWDATA_H
