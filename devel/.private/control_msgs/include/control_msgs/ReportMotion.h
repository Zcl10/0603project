// Generated by gencpp from file control_msgs/ReportMotion.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_REPORTMOTION_H
#define CONTROL_MSGS_MESSAGE_REPORTMOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control_msgs
{
template <class ContainerAllocator>
struct ReportMotion_
{
  typedef ReportMotion_<ContainerAllocator> Type;

  ReportMotion_()
    : drive_mode(0)
    , steer(0.0)
    , gear(0)
    , velocity(0.0)  {
    }
  ReportMotion_(const ContainerAllocator& _alloc)
    : drive_mode(0)
    , steer(0.0)
    , gear(0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _drive_mode_type;
  _drive_mode_type drive_mode;

   typedef double _steer_type;
  _steer_type steer;

   typedef uint8_t _gear_type;
  _gear_type gear;

   typedef double _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::control_msgs::ReportMotion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::ReportMotion_<ContainerAllocator> const> ConstPtr;

}; // struct ReportMotion_

typedef ::control_msgs::ReportMotion_<std::allocator<void> > ReportMotion;

typedef boost::shared_ptr< ::control_msgs::ReportMotion > ReportMotionPtr;
typedef boost::shared_ptr< ::control_msgs::ReportMotion const> ReportMotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::ReportMotion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::ReportMotion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_driver_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/sensor_driver_msgs/msg'], 'control_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/control_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::ReportMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::ReportMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::ReportMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::ReportMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::ReportMotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::ReportMotion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::ReportMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a2097da0492d806d521147d3f4fe664";
  }

  static const char* value(const ::control_msgs::ReportMotion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a2097da0492d806ULL;
  static const uint64_t static_value2 = 0xd521147d3f4fe664ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::ReportMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/ReportMotion";
  }

  static const char* value(const ::control_msgs::ReportMotion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::ReportMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 drive_mode\n\
float64 steer\n\
uint8 gear\n\
float64 velocity\n\
\n\
\n\
";
  }

  static const char* value(const ::control_msgs::ReportMotion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::ReportMotion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drive_mode);
      stream.next(m.steer);
      stream.next(m.gear);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReportMotion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::ReportMotion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::ReportMotion_<ContainerAllocator>& v)
  {
    s << indent << "drive_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drive_mode);
    s << indent << "steer: ";
    Printer<double>::stream(s, indent + "  ", v.steer);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_REPORTMOTION_H
