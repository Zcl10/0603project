// Generated by gencpp from file control_msgs/ReportBrake.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_REPORTBRAKE_H
#define CONTROL_MSGS_MESSAGE_REPORTBRAKE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control_msgs
{
template <class ContainerAllocator>
struct ReportBrake_
{
  typedef ReportBrake_<ContainerAllocator> Type;

  ReportBrake_()
    : left_pressure_back(0.0)
    , right_pressure_back(0.0)
    , auto_park_state(0)
    , auto_brake_enable(0)
    , system_hot_warn(0)
    , system_error_code(0)
    , left_pressure_set(0.0)
    , right_pressure_set(0.0)
    , brake_pedal(0.0)  {
    }
  ReportBrake_(const ContainerAllocator& _alloc)
    : left_pressure_back(0.0)
    , right_pressure_back(0.0)
    , auto_park_state(0)
    , auto_brake_enable(0)
    , system_hot_warn(0)
    , system_error_code(0)
    , left_pressure_set(0.0)
    , right_pressure_set(0.0)
    , brake_pedal(0.0)  {
  (void)_alloc;
    }



   typedef double _left_pressure_back_type;
  _left_pressure_back_type left_pressure_back;

   typedef double _right_pressure_back_type;
  _right_pressure_back_type right_pressure_back;

   typedef uint8_t _auto_park_state_type;
  _auto_park_state_type auto_park_state;

   typedef uint8_t _auto_brake_enable_type;
  _auto_brake_enable_type auto_brake_enable;

   typedef uint8_t _system_hot_warn_type;
  _system_hot_warn_type system_hot_warn;

   typedef uint8_t _system_error_code_type;
  _system_error_code_type system_error_code;

   typedef double _left_pressure_set_type;
  _left_pressure_set_type left_pressure_set;

   typedef double _right_pressure_set_type;
  _right_pressure_set_type right_pressure_set;

   typedef float _brake_pedal_type;
  _brake_pedal_type brake_pedal;





  typedef boost::shared_ptr< ::control_msgs::ReportBrake_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::ReportBrake_<ContainerAllocator> const> ConstPtr;

}; // struct ReportBrake_

typedef ::control_msgs::ReportBrake_<std::allocator<void> > ReportBrake;

typedef boost::shared_ptr< ::control_msgs::ReportBrake > ReportBrakePtr;
typedef boost::shared_ptr< ::control_msgs::ReportBrake const> ReportBrakeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::ReportBrake_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::ReportBrake_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_driver_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/sensor_driver_msgs/msg'], 'control_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/control_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::ReportBrake_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::ReportBrake_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::ReportBrake_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::ReportBrake_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::ReportBrake_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::ReportBrake_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::ReportBrake_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8b58fe12b43fe4b1c2d9a5950b7da37";
  }

  static const char* value(const ::control_msgs::ReportBrake_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8b58fe12b43fe4bULL;
  static const uint64_t static_value2 = 0x1c2d9a5950b7da37ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::ReportBrake_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/ReportBrake";
  }

  static const char* value(const ::control_msgs::ReportBrake_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::ReportBrake_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 left_pressure_back\n\
float64 right_pressure_back\n\
uint8 auto_park_state\n\
uint8 auto_brake_enable\n\
uint8 system_hot_warn\n\
uint8 system_error_code\n\
float64 left_pressure_set\n\
float64 right_pressure_set\n\
float32 brake_pedal\n\
";
  }

  static const char* value(const ::control_msgs::ReportBrake_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::ReportBrake_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_pressure_back);
      stream.next(m.right_pressure_back);
      stream.next(m.auto_park_state);
      stream.next(m.auto_brake_enable);
      stream.next(m.system_hot_warn);
      stream.next(m.system_error_code);
      stream.next(m.left_pressure_set);
      stream.next(m.right_pressure_set);
      stream.next(m.brake_pedal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReportBrake_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::ReportBrake_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::ReportBrake_<ContainerAllocator>& v)
  {
    s << indent << "left_pressure_back: ";
    Printer<double>::stream(s, indent + "  ", v.left_pressure_back);
    s << indent << "right_pressure_back: ";
    Printer<double>::stream(s, indent + "  ", v.right_pressure_back);
    s << indent << "auto_park_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_park_state);
    s << indent << "auto_brake_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_brake_enable);
    s << indent << "system_hot_warn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_hot_warn);
    s << indent << "system_error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_error_code);
    s << indent << "left_pressure_set: ";
    Printer<double>::stream(s, indent + "  ", v.left_pressure_set);
    s << indent << "right_pressure_set: ";
    Printer<double>::stream(s, indent + "  ", v.right_pressure_set);
    s << indent << "brake_pedal: ";
    Printer<float>::stream(s, indent + "  ", v.brake_pedal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_REPORTBRAKE_H
