// Generated by gencpp from file control_msgs/Report.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_REPORT_H
#define CONTROL_MSGS_MESSAGE_REPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <control_msgs/ReportControl.h>
#include <control_msgs/ReportControl.h>
#include <control_msgs/ReportMotion.h>
#include <control_msgs/ReportBrake.h>
#include <control_msgs/ReportThrottle.h>
#include <control_msgs/ReportWheel.h>
#include <control_msgs/ReportHMI.h>
#include <control_msgs/ReportVehicleWorkMode.h>

namespace control_msgs
{
template <class ContainerAllocator>
struct Report_
{
  typedef Report_<ContainerAllocator> Type;

  Report_()
    : header()
    , control()
    , vcu_torque_brake()
    , motion()
    , brake()
    , throttle()
    , wheel()
    , manual()
    , vehicle_work_mode()  {
    }
  Report_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , control(_alloc)
    , vcu_torque_brake(_alloc)
    , motion(_alloc)
    , brake(_alloc)
    , throttle(_alloc)
    , wheel(_alloc)
    , manual(_alloc)
    , vehicle_work_mode(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::control_msgs::ReportControl_<ContainerAllocator>  _control_type;
  _control_type control;

   typedef  ::control_msgs::ReportControl_<ContainerAllocator>  _vcu_torque_brake_type;
  _vcu_torque_brake_type vcu_torque_brake;

   typedef  ::control_msgs::ReportMotion_<ContainerAllocator>  _motion_type;
  _motion_type motion;

   typedef  ::control_msgs::ReportBrake_<ContainerAllocator>  _brake_type;
  _brake_type brake;

   typedef  ::control_msgs::ReportThrottle_<ContainerAllocator>  _throttle_type;
  _throttle_type throttle;

   typedef  ::control_msgs::ReportWheel_<ContainerAllocator>  _wheel_type;
  _wheel_type wheel;

   typedef  ::control_msgs::ReportHMI_<ContainerAllocator>  _manual_type;
  _manual_type manual;

   typedef  ::control_msgs::ReportVehicleWorkMode_<ContainerAllocator>  _vehicle_work_mode_type;
  _vehicle_work_mode_type vehicle_work_mode;





  typedef boost::shared_ptr< ::control_msgs::Report_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::Report_<ContainerAllocator> const> ConstPtr;

}; // struct Report_

typedef ::control_msgs::Report_<std::allocator<void> > Report;

typedef boost::shared_ptr< ::control_msgs::Report > ReportPtr;
typedef boost::shared_ptr< ::control_msgs::Report const> ReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::Report_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::Report_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_driver_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/sensor_driver_msgs/msg'], 'control_msgs': ['/home/bit2/0603_project/tang_ws/src/msgs/control_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::Report_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::Report_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::Report_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::Report_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::Report_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::Report_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::Report_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0321a05248d872c4619e82c983a49c38";
  }

  static const char* value(const ::control_msgs::Report_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0321a05248d872c4ULL;
  static const uint64_t static_value2 = 0x619e82c983a49c38ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::Report_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/Report";
  }

  static const char* value(const ::control_msgs::Report_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::Report_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
ReportControl control\n\
\n\
ReportControl vcu_torque_brake\n\
\n\
ReportMotion motion\n\
ReportBrake brake\n\
ReportThrottle throttle\n\
ReportWheel wheel\n\
ReportHMI manual\n\
ReportVehicleWorkMode vehicle_work_mode \n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: control_msgs/ReportControl\n\
ControlSpeed Speed\n\
ControlSteer Steer\n\
ControlMode ordermode\n\
\n\
\n\
================================================================================\n\
MSG: control_msgs/ControlSpeed\n\
Header header\n\
uint8 priority\n\
uint8 gear\n\
float64 speed\n\
float64 acc\n\
float64 torque\n\
float64 brake\n\
\n\
================================================================================\n\
MSG: control_msgs/ControlSteer\n\
Header header\n\
uint8 priority\n\
float64 steer\n\
\n\
\n\
================================================================================\n\
MSG: control_msgs/ControlMode\n\
Header header\n\
uint8 RainyLight\n\
\n\
\n\
\n\
================================================================================\n\
MSG: control_msgs/ReportMotion\n\
uint8 drive_mode\n\
float64 steer\n\
uint8 gear\n\
float64 velocity\n\
\n\
\n\
\n\
================================================================================\n\
MSG: control_msgs/ReportBrake\n\
float64 left_pressure_back\n\
float64 right_pressure_back\n\
uint8 auto_park_state\n\
uint8 auto_brake_enable\n\
uint8 system_hot_warn\n\
uint8 system_error_code\n\
float64 left_pressure_set\n\
float64 right_pressure_set\n\
float32 brake_pedal\n\
\n\
================================================================================\n\
MSG: control_msgs/ReportThrottle\n\
float32 throttle_opening\n\
float32 throttle_pedal\n\
\n\
================================================================================\n\
MSG: control_msgs/ReportWheel\n\
float32 front_left\n\
float32 front_right\n\
float32 rear_left\n\
float32 rear_right\n\
uint8 statusfl\n\
uint8 statusfr\n\
uint8 statusrl\n\
uint8 statusrr\n\
\n\
================================================================================\n\
MSG: control_msgs/ReportHMI\n\
uint8 manual_estop\n\
uint8 is_human_brake \n\
\n\
================================================================================\n\
MSG: control_msgs/ReportVehicleWorkMode\n\
uint8 work_mode\n\
\n\
\n\
";
  }

  static const char* value(const ::control_msgs::Report_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::Report_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.control);
      stream.next(m.vcu_torque_brake);
      stream.next(m.motion);
      stream.next(m.brake);
      stream.next(m.throttle);
      stream.next(m.wheel);
      stream.next(m.manual);
      stream.next(m.vehicle_work_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Report_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::Report_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::Report_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control: ";
    s << std::endl;
    Printer< ::control_msgs::ReportControl_<ContainerAllocator> >::stream(s, indent + "  ", v.control);
    s << indent << "vcu_torque_brake: ";
    s << std::endl;
    Printer< ::control_msgs::ReportControl_<ContainerAllocator> >::stream(s, indent + "  ", v.vcu_torque_brake);
    s << indent << "motion: ";
    s << std::endl;
    Printer< ::control_msgs::ReportMotion_<ContainerAllocator> >::stream(s, indent + "  ", v.motion);
    s << indent << "brake: ";
    s << std::endl;
    Printer< ::control_msgs::ReportBrake_<ContainerAllocator> >::stream(s, indent + "  ", v.brake);
    s << indent << "throttle: ";
    s << std::endl;
    Printer< ::control_msgs::ReportThrottle_<ContainerAllocator> >::stream(s, indent + "  ", v.throttle);
    s << indent << "wheel: ";
    s << std::endl;
    Printer< ::control_msgs::ReportWheel_<ContainerAllocator> >::stream(s, indent + "  ", v.wheel);
    s << indent << "manual: ";
    s << std::endl;
    Printer< ::control_msgs::ReportHMI_<ContainerAllocator> >::stream(s, indent + "  ", v.manual);
    s << indent << "vehicle_work_mode: ";
    s << std::endl;
    Printer< ::control_msgs::ReportVehicleWorkMode_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_work_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_REPORT_H
