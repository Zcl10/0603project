# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_msgs/Report.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import control_msgs.msg
import std_msgs.msg

class Report(genpy.Message):
  _md5sum = "0321a05248d872c4619e82c983a49c38"
  _type = "control_msgs/Report"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
ReportControl control

ReportControl vcu_torque_brake

ReportMotion motion
ReportBrake brake
ReportThrottle throttle
ReportWheel wheel
ReportHMI manual
ReportVehicleWorkMode vehicle_work_mode 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: control_msgs/ReportControl
ControlSpeed Speed
ControlSteer Steer
ControlMode ordermode


================================================================================
MSG: control_msgs/ControlSpeed
Header header
uint8 priority
uint8 gear
float64 speed
float64 acc
float64 torque
float64 brake

================================================================================
MSG: control_msgs/ControlSteer
Header header
uint8 priority
float64 steer


================================================================================
MSG: control_msgs/ControlMode
Header header
uint8 RainyLight



================================================================================
MSG: control_msgs/ReportMotion
uint8 drive_mode
float64 steer
uint8 gear
float64 velocity



================================================================================
MSG: control_msgs/ReportBrake
float64 left_pressure_back
float64 right_pressure_back
uint8 auto_park_state
uint8 auto_brake_enable
uint8 system_hot_warn
uint8 system_error_code
float64 left_pressure_set
float64 right_pressure_set
float32 brake_pedal

================================================================================
MSG: control_msgs/ReportThrottle
float32 throttle_opening
float32 throttle_pedal

================================================================================
MSG: control_msgs/ReportWheel
float32 front_left
float32 front_right
float32 rear_left
float32 rear_right
uint8 statusfl
uint8 statusfr
uint8 statusrl
uint8 statusrr

================================================================================
MSG: control_msgs/ReportHMI
uint8 manual_estop
uint8 is_human_brake 

================================================================================
MSG: control_msgs/ReportVehicleWorkMode
uint8 work_mode


"""
  __slots__ = ['header','control','vcu_torque_brake','motion','brake','throttle','wheel','manual','vehicle_work_mode']
  _slot_types = ['std_msgs/Header','control_msgs/ReportControl','control_msgs/ReportControl','control_msgs/ReportMotion','control_msgs/ReportBrake','control_msgs/ReportThrottle','control_msgs/ReportWheel','control_msgs/ReportHMI','control_msgs/ReportVehicleWorkMode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,control,vcu_torque_brake,motion,brake,throttle,wheel,manual,vehicle_work_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Report, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.control is None:
        self.control = control_msgs.msg.ReportControl()
      if self.vcu_torque_brake is None:
        self.vcu_torque_brake = control_msgs.msg.ReportControl()
      if self.motion is None:
        self.motion = control_msgs.msg.ReportMotion()
      if self.brake is None:
        self.brake = control_msgs.msg.ReportBrake()
      if self.throttle is None:
        self.throttle = control_msgs.msg.ReportThrottle()
      if self.wheel is None:
        self.wheel = control_msgs.msg.ReportWheel()
      if self.manual is None:
        self.manual = control_msgs.msg.ReportHMI()
      if self.vehicle_work_mode is None:
        self.vehicle_work_mode = control_msgs.msg.ReportVehicleWorkMode()
    else:
      self.header = std_msgs.msg.Header()
      self.control = control_msgs.msg.ReportControl()
      self.vcu_torque_brake = control_msgs.msg.ReportControl()
      self.motion = control_msgs.msg.ReportMotion()
      self.brake = control_msgs.msg.ReportBrake()
      self.throttle = control_msgs.msg.ReportThrottle()
      self.wheel = control_msgs.msg.ReportWheel()
      self.manual = control_msgs.msg.ReportHMI()
      self.vehicle_work_mode = control_msgs.msg.ReportVehicleWorkMode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.control.Speed.header.seq, _x.control.Speed.header.stamp.secs, _x.control.Speed.header.stamp.nsecs))
      _x = self.control.Speed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B4d3I().pack(_x.control.Speed.priority, _x.control.Speed.gear, _x.control.Speed.speed, _x.control.Speed.acc, _x.control.Speed.torque, _x.control.Speed.brake, _x.control.Steer.header.seq, _x.control.Steer.header.stamp.secs, _x.control.Steer.header.stamp.nsecs))
      _x = self.control.Steer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bd3I().pack(_x.control.Steer.priority, _x.control.Steer.steer, _x.control.ordermode.header.seq, _x.control.ordermode.header.stamp.secs, _x.control.ordermode.header.stamp.nsecs))
      _x = self.control.ordermode.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.control.ordermode.RainyLight, _x.vcu_torque_brake.Speed.header.seq, _x.vcu_torque_brake.Speed.header.stamp.secs, _x.vcu_torque_brake.Speed.header.stamp.nsecs))
      _x = self.vcu_torque_brake.Speed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B4d3I().pack(_x.vcu_torque_brake.Speed.priority, _x.vcu_torque_brake.Speed.gear, _x.vcu_torque_brake.Speed.speed, _x.vcu_torque_brake.Speed.acc, _x.vcu_torque_brake.Speed.torque, _x.vcu_torque_brake.Speed.brake, _x.vcu_torque_brake.Steer.header.seq, _x.vcu_torque_brake.Steer.header.stamp.secs, _x.vcu_torque_brake.Steer.header.stamp.nsecs))
      _x = self.vcu_torque_brake.Steer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bd3I().pack(_x.vcu_torque_brake.Steer.priority, _x.vcu_torque_brake.Steer.steer, _x.vcu_torque_brake.ordermode.header.seq, _x.vcu_torque_brake.ordermode.header.stamp.secs, _x.vcu_torque_brake.ordermode.header.stamp.nsecs))
      _x = self.vcu_torque_brake.ordermode.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2BdB3d4B2d7f7B().pack(_x.vcu_torque_brake.ordermode.RainyLight, _x.motion.drive_mode, _x.motion.steer, _x.motion.gear, _x.motion.velocity, _x.brake.left_pressure_back, _x.brake.right_pressure_back, _x.brake.auto_park_state, _x.brake.auto_brake_enable, _x.brake.system_hot_warn, _x.brake.system_error_code, _x.brake.left_pressure_set, _x.brake.right_pressure_set, _x.brake.brake_pedal, _x.throttle.throttle_opening, _x.throttle.throttle_pedal, _x.wheel.front_left, _x.wheel.front_right, _x.wheel.rear_left, _x.wheel.rear_right, _x.wheel.statusfl, _x.wheel.statusfr, _x.wheel.statusrl, _x.wheel.statusrr, _x.manual.manual_estop, _x.manual.is_human_brake, _x.vehicle_work_mode.work_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.control is None:
        self.control = control_msgs.msg.ReportControl()
      if self.vcu_torque_brake is None:
        self.vcu_torque_brake = control_msgs.msg.ReportControl()
      if self.motion is None:
        self.motion = control_msgs.msg.ReportMotion()
      if self.brake is None:
        self.brake = control_msgs.msg.ReportBrake()
      if self.throttle is None:
        self.throttle = control_msgs.msg.ReportThrottle()
      if self.wheel is None:
        self.wheel = control_msgs.msg.ReportWheel()
      if self.manual is None:
        self.manual = control_msgs.msg.ReportHMI()
      if self.vehicle_work_mode is None:
        self.vehicle_work_mode = control_msgs.msg.ReportVehicleWorkMode()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.control.Speed.header.seq, _x.control.Speed.header.stamp.secs, _x.control.Speed.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control.Speed.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.control.Speed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.control.Speed.priority, _x.control.Speed.gear, _x.control.Speed.speed, _x.control.Speed.acc, _x.control.Speed.torque, _x.control.Speed.brake, _x.control.Steer.header.seq, _x.control.Steer.header.stamp.secs, _x.control.Steer.header.stamp.nsecs,) = _get_struct_2B4d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control.Steer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.control.Steer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.control.Steer.priority, _x.control.Steer.steer, _x.control.ordermode.header.seq, _x.control.ordermode.header.stamp.secs, _x.control.ordermode.header.stamp.nsecs,) = _get_struct_Bd3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control.ordermode.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.control.ordermode.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.control.ordermode.RainyLight, _x.vcu_torque_brake.Speed.header.seq, _x.vcu_torque_brake.Speed.header.stamp.secs, _x.vcu_torque_brake.Speed.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vcu_torque_brake.Speed.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.vcu_torque_brake.Speed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.vcu_torque_brake.Speed.priority, _x.vcu_torque_brake.Speed.gear, _x.vcu_torque_brake.Speed.speed, _x.vcu_torque_brake.Speed.acc, _x.vcu_torque_brake.Speed.torque, _x.vcu_torque_brake.Speed.brake, _x.vcu_torque_brake.Steer.header.seq, _x.vcu_torque_brake.Steer.header.stamp.secs, _x.vcu_torque_brake.Steer.header.stamp.nsecs,) = _get_struct_2B4d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vcu_torque_brake.Steer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.vcu_torque_brake.Steer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.vcu_torque_brake.Steer.priority, _x.vcu_torque_brake.Steer.steer, _x.vcu_torque_brake.ordermode.header.seq, _x.vcu_torque_brake.ordermode.header.stamp.secs, _x.vcu_torque_brake.ordermode.header.stamp.nsecs,) = _get_struct_Bd3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vcu_torque_brake.ordermode.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.vcu_torque_brake.ordermode.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 90
      (_x.vcu_torque_brake.ordermode.RainyLight, _x.motion.drive_mode, _x.motion.steer, _x.motion.gear, _x.motion.velocity, _x.brake.left_pressure_back, _x.brake.right_pressure_back, _x.brake.auto_park_state, _x.brake.auto_brake_enable, _x.brake.system_hot_warn, _x.brake.system_error_code, _x.brake.left_pressure_set, _x.brake.right_pressure_set, _x.brake.brake_pedal, _x.throttle.throttle_opening, _x.throttle.throttle_pedal, _x.wheel.front_left, _x.wheel.front_right, _x.wheel.rear_left, _x.wheel.rear_right, _x.wheel.statusfl, _x.wheel.statusfr, _x.wheel.statusrl, _x.wheel.statusrr, _x.manual.manual_estop, _x.manual.is_human_brake, _x.vehicle_work_mode.work_mode,) = _get_struct_2BdB3d4B2d7f7B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.control.Speed.header.seq, _x.control.Speed.header.stamp.secs, _x.control.Speed.header.stamp.nsecs))
      _x = self.control.Speed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B4d3I().pack(_x.control.Speed.priority, _x.control.Speed.gear, _x.control.Speed.speed, _x.control.Speed.acc, _x.control.Speed.torque, _x.control.Speed.brake, _x.control.Steer.header.seq, _x.control.Steer.header.stamp.secs, _x.control.Steer.header.stamp.nsecs))
      _x = self.control.Steer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bd3I().pack(_x.control.Steer.priority, _x.control.Steer.steer, _x.control.ordermode.header.seq, _x.control.ordermode.header.stamp.secs, _x.control.ordermode.header.stamp.nsecs))
      _x = self.control.ordermode.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.control.ordermode.RainyLight, _x.vcu_torque_brake.Speed.header.seq, _x.vcu_torque_brake.Speed.header.stamp.secs, _x.vcu_torque_brake.Speed.header.stamp.nsecs))
      _x = self.vcu_torque_brake.Speed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B4d3I().pack(_x.vcu_torque_brake.Speed.priority, _x.vcu_torque_brake.Speed.gear, _x.vcu_torque_brake.Speed.speed, _x.vcu_torque_brake.Speed.acc, _x.vcu_torque_brake.Speed.torque, _x.vcu_torque_brake.Speed.brake, _x.vcu_torque_brake.Steer.header.seq, _x.vcu_torque_brake.Steer.header.stamp.secs, _x.vcu_torque_brake.Steer.header.stamp.nsecs))
      _x = self.vcu_torque_brake.Steer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bd3I().pack(_x.vcu_torque_brake.Steer.priority, _x.vcu_torque_brake.Steer.steer, _x.vcu_torque_brake.ordermode.header.seq, _x.vcu_torque_brake.ordermode.header.stamp.secs, _x.vcu_torque_brake.ordermode.header.stamp.nsecs))
      _x = self.vcu_torque_brake.ordermode.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2BdB3d4B2d7f7B().pack(_x.vcu_torque_brake.ordermode.RainyLight, _x.motion.drive_mode, _x.motion.steer, _x.motion.gear, _x.motion.velocity, _x.brake.left_pressure_back, _x.brake.right_pressure_back, _x.brake.auto_park_state, _x.brake.auto_brake_enable, _x.brake.system_hot_warn, _x.brake.system_error_code, _x.brake.left_pressure_set, _x.brake.right_pressure_set, _x.brake.brake_pedal, _x.throttle.throttle_opening, _x.throttle.throttle_pedal, _x.wheel.front_left, _x.wheel.front_right, _x.wheel.rear_left, _x.wheel.rear_right, _x.wheel.statusfl, _x.wheel.statusfr, _x.wheel.statusrl, _x.wheel.statusrr, _x.manual.manual_estop, _x.manual.is_human_brake, _x.vehicle_work_mode.work_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.control is None:
        self.control = control_msgs.msg.ReportControl()
      if self.vcu_torque_brake is None:
        self.vcu_torque_brake = control_msgs.msg.ReportControl()
      if self.motion is None:
        self.motion = control_msgs.msg.ReportMotion()
      if self.brake is None:
        self.brake = control_msgs.msg.ReportBrake()
      if self.throttle is None:
        self.throttle = control_msgs.msg.ReportThrottle()
      if self.wheel is None:
        self.wheel = control_msgs.msg.ReportWheel()
      if self.manual is None:
        self.manual = control_msgs.msg.ReportHMI()
      if self.vehicle_work_mode is None:
        self.vehicle_work_mode = control_msgs.msg.ReportVehicleWorkMode()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.control.Speed.header.seq, _x.control.Speed.header.stamp.secs, _x.control.Speed.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control.Speed.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.control.Speed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.control.Speed.priority, _x.control.Speed.gear, _x.control.Speed.speed, _x.control.Speed.acc, _x.control.Speed.torque, _x.control.Speed.brake, _x.control.Steer.header.seq, _x.control.Steer.header.stamp.secs, _x.control.Steer.header.stamp.nsecs,) = _get_struct_2B4d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control.Steer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.control.Steer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.control.Steer.priority, _x.control.Steer.steer, _x.control.ordermode.header.seq, _x.control.ordermode.header.stamp.secs, _x.control.ordermode.header.stamp.nsecs,) = _get_struct_Bd3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control.ordermode.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.control.ordermode.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.control.ordermode.RainyLight, _x.vcu_torque_brake.Speed.header.seq, _x.vcu_torque_brake.Speed.header.stamp.secs, _x.vcu_torque_brake.Speed.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vcu_torque_brake.Speed.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.vcu_torque_brake.Speed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.vcu_torque_brake.Speed.priority, _x.vcu_torque_brake.Speed.gear, _x.vcu_torque_brake.Speed.speed, _x.vcu_torque_brake.Speed.acc, _x.vcu_torque_brake.Speed.torque, _x.vcu_torque_brake.Speed.brake, _x.vcu_torque_brake.Steer.header.seq, _x.vcu_torque_brake.Steer.header.stamp.secs, _x.vcu_torque_brake.Steer.header.stamp.nsecs,) = _get_struct_2B4d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vcu_torque_brake.Steer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.vcu_torque_brake.Steer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.vcu_torque_brake.Steer.priority, _x.vcu_torque_brake.Steer.steer, _x.vcu_torque_brake.ordermode.header.seq, _x.vcu_torque_brake.ordermode.header.stamp.secs, _x.vcu_torque_brake.ordermode.header.stamp.nsecs,) = _get_struct_Bd3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vcu_torque_brake.ordermode.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.vcu_torque_brake.ordermode.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 90
      (_x.vcu_torque_brake.ordermode.RainyLight, _x.motion.drive_mode, _x.motion.steer, _x.motion.gear, _x.motion.velocity, _x.brake.left_pressure_back, _x.brake.right_pressure_back, _x.brake.auto_park_state, _x.brake.auto_brake_enable, _x.brake.system_hot_warn, _x.brake.system_error_code, _x.brake.left_pressure_set, _x.brake.right_pressure_set, _x.brake.brake_pedal, _x.throttle.throttle_opening, _x.throttle.throttle_pedal, _x.wheel.front_left, _x.wheel.front_right, _x.wheel.rear_left, _x.wheel.rear_right, _x.wheel.statusfl, _x.wheel.statusfr, _x.wheel.statusrl, _x.wheel.statusrr, _x.manual.manual_estop, _x.manual.is_human_brake, _x.vehicle_work_mode.work_mode,) = _get_struct_2BdB3d4B2d7f7B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bd3I = None
def _get_struct_Bd3I():
    global _struct_Bd3I
    if _struct_Bd3I is None:
        _struct_Bd3I = struct.Struct("<Bd3I")
    return _struct_Bd3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2BdB3d4B2d7f7B = None
def _get_struct_2BdB3d4B2d7f7B():
    global _struct_2BdB3d4B2d7f7B
    if _struct_2BdB3d4B2d7f7B is None:
        _struct_2BdB3d4B2d7f7B = struct.Struct("<2BdB3d4B2d7f7B")
    return _struct_2BdB3d4B2d7f7B
_struct_2B4d3I = None
def _get_struct_2B4d3I():
    global _struct_2B4d3I
    if _struct_2B4d3I is None:
        _struct_2B4d3I = struct.Struct("<2B4d3I")
    return _struct_2B4d3I
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
