# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_msgs/ReportControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import control_msgs.msg

class ReportControl(genpy.Message):
  _md5sum = "4cfa3145374ffabe5a1139ad8f40e485"
  _type = "control_msgs/ReportControl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ControlSpeed Speed
ControlSteer Steer
ControlMode ordermode


================================================================================
MSG: control_msgs/ControlSpeed
Header header
uint8 priority
uint8 gear
float64 speed
float64 acc
float64 torque
float64 brake

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: control_msgs/ControlSteer
Header header
uint8 priority
float64 steer


================================================================================
MSG: control_msgs/ControlMode
Header header
uint8 RainyLight


"""
  __slots__ = ['Speed','Steer','ordermode']
  _slot_types = ['control_msgs/ControlSpeed','control_msgs/ControlSteer','control_msgs/ControlMode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Speed,Steer,ordermode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReportControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Speed is None:
        self.Speed = control_msgs.msg.ControlSpeed()
      if self.Steer is None:
        self.Steer = control_msgs.msg.ControlSteer()
      if self.ordermode is None:
        self.ordermode = control_msgs.msg.ControlMode()
    else:
      self.Speed = control_msgs.msg.ControlSpeed()
      self.Steer = control_msgs.msg.ControlSteer()
      self.ordermode = control_msgs.msg.ControlMode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Speed.header.seq, _x.Speed.header.stamp.secs, _x.Speed.header.stamp.nsecs))
      _x = self.Speed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B4d3I().pack(_x.Speed.priority, _x.Speed.gear, _x.Speed.speed, _x.Speed.acc, _x.Speed.torque, _x.Speed.brake, _x.Steer.header.seq, _x.Steer.header.stamp.secs, _x.Steer.header.stamp.nsecs))
      _x = self.Steer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bd3I().pack(_x.Steer.priority, _x.Steer.steer, _x.ordermode.header.seq, _x.ordermode.header.stamp.secs, _x.ordermode.header.stamp.nsecs))
      _x = self.ordermode.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.ordermode.RainyLight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Speed is None:
        self.Speed = control_msgs.msg.ControlSpeed()
      if self.Steer is None:
        self.Steer = control_msgs.msg.ControlSteer()
      if self.ordermode is None:
        self.ordermode = control_msgs.msg.ControlMode()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Speed.header.seq, _x.Speed.header.stamp.secs, _x.Speed.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Speed.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.Speed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.Speed.priority, _x.Speed.gear, _x.Speed.speed, _x.Speed.acc, _x.Speed.torque, _x.Speed.brake, _x.Steer.header.seq, _x.Steer.header.stamp.secs, _x.Steer.header.stamp.nsecs,) = _get_struct_2B4d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Steer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.Steer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.Steer.priority, _x.Steer.steer, _x.ordermode.header.seq, _x.ordermode.header.stamp.secs, _x.ordermode.header.stamp.nsecs,) = _get_struct_Bd3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ordermode.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ordermode.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.ordermode.RainyLight,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Speed.header.seq, _x.Speed.header.stamp.secs, _x.Speed.header.stamp.nsecs))
      _x = self.Speed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B4d3I().pack(_x.Speed.priority, _x.Speed.gear, _x.Speed.speed, _x.Speed.acc, _x.Speed.torque, _x.Speed.brake, _x.Steer.header.seq, _x.Steer.header.stamp.secs, _x.Steer.header.stamp.nsecs))
      _x = self.Steer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Bd3I().pack(_x.Steer.priority, _x.Steer.steer, _x.ordermode.header.seq, _x.ordermode.header.stamp.secs, _x.ordermode.header.stamp.nsecs))
      _x = self.ordermode.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.ordermode.RainyLight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Speed is None:
        self.Speed = control_msgs.msg.ControlSpeed()
      if self.Steer is None:
        self.Steer = control_msgs.msg.ControlSteer()
      if self.ordermode is None:
        self.ordermode = control_msgs.msg.ControlMode()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Speed.header.seq, _x.Speed.header.stamp.secs, _x.Speed.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Speed.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.Speed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.Speed.priority, _x.Speed.gear, _x.Speed.speed, _x.Speed.acc, _x.Speed.torque, _x.Speed.brake, _x.Steer.header.seq, _x.Steer.header.stamp.secs, _x.Steer.header.stamp.nsecs,) = _get_struct_2B4d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Steer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.Steer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.Steer.priority, _x.Steer.steer, _x.ordermode.header.seq, _x.ordermode.header.stamp.secs, _x.ordermode.header.stamp.nsecs,) = _get_struct_Bd3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ordermode.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ordermode.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.ordermode.RainyLight,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bd3I = None
def _get_struct_Bd3I():
    global _struct_Bd3I
    if _struct_Bd3I is None:
        _struct_Bd3I = struct.Struct("<Bd3I")
    return _struct_Bd3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_2B4d3I = None
def _get_struct_2B4d3I():
    global _struct_2B4d3I
    if _struct_2B4d3I is None:
        _struct_2B4d3I = struct.Struct("<2B4d3I")
    return _struct_2B4d3I
